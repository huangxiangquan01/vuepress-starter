import{_ as n,r as h,o as r,c as E,b as e,e as l,w as i,d as a,a as d}from"./app-999de8cb.js";const s={},o=d('<h1 id="java设计模式" tabindex="-1"><a class="header-anchor" href="#java设计模式" aria-hidden="true">#</a> Java设计模式</h1><h2 id="一、什么是设计模式" tabindex="-1"><a class="header-anchor" href="#一、什么是设计模式" aria-hidden="true">#</a> <strong>一、什么是设计模式</strong></h2><p>设计模式（Design pattern） 是解决软件开发某些特定问题而提出的一些解决方案也可以理解成解决问题的一些思路。通过设计模式可以帮助我们增强代码的可重用性、可扩充性、 可维护性、灵活性好。我们使用设计模式最终的目的是实现代码的高内聚和低耦合。</p><h2 id="二、设计模式的三大分类及关键点" tabindex="-1"><a class="header-anchor" href="#二、设计模式的三大分类及关键点" aria-hidden="true">#</a> 二、设计模式的三大分类及关键点</h2><p><img src="https://xqhuang.oss-cn-beijing.aliyuncs.com/study/IMG_19AD0DA3F1CA-1.jpeg?versionId=CAEQERiBgMCMhrbc0xciIGQ3YjNlYjU3NmIyZjQyZjM5NzYyM2NlNmZmNGMwZWVl" alt="image"></p><h3 id="_1、创建型模式" tabindex="-1"><a class="header-anchor" href="#_1、创建型模式" aria-hidden="true">#</a> 1、创建型模式</h3><p>对象实例化的模式，创建型模式用于解耦对象的实例化过程。</p>',7),u=e("h3",{id:"_2、结构型模式",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_2、结构型模式","aria-hidden":"true"},"#"),a(" 2、结构型模式")],-1),A=e("p",null,"把类或对象结合在一起形成一个更大的结构。",-1),c=e("h3",{id:"_3、行为型模式",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_3、行为型模式","aria-hidden":"true"},"#"),a(" 3、行为型模式")],-1),p=e("p",null,"类和对象如何交互，及划分责任和算法。",-1),_=d('<h2 id="三、设计模式的几种原则" tabindex="-1"><a class="header-anchor" href="#三、设计模式的几种原则" aria-hidden="true">#</a> 三、设计模式的几种原则</h2><h4 id="_1、单一职责原则" tabindex="-1"><a class="header-anchor" href="#_1、单一职责原则" aria-hidden="true">#</a> 1、单一职责原则</h4><p>对于一个类，只有一个引起该类变化的原因；该类的职责是唯一的，且这个职责是唯一引起其他类变化的原因。</p><h4 id="_2、接口隔离原则" tabindex="-1"><a class="header-anchor" href="#_2、接口隔离原则" aria-hidden="true">#</a> 2、接口隔离原则</h4><p>客户端不应该依赖它不需要的接口，一个类对另一个类的依赖应该建立在最小的接口上。</p><h4 id="_3、依赖倒转原则" tabindex="-1"><a class="header-anchor" href="#_3、依赖倒转原则" aria-hidden="true">#</a> 3、依赖倒转原则</h4><p>依赖倒转原则是程序要依赖于抽象接口，不要依赖于具体实现。简单的说就是要求对抽象进行编程，不要对实现进行编程，这样就降低了客户与实现模块间的耦合。</p><h4 id="_4、里式代换原则" tabindex="-1"><a class="header-anchor" href="#_4、里式代换原则" aria-hidden="true">#</a> 4、里式代换原则</h4><p>任何基类可以出现的地方，子类一定可以出现。里氏代换原则是继承复用的基石，只有当衍生类可以替换基类，软件单位的功能不受影响时，基类才能真正的被复用，而衍生类也能够在基类的基础上增加新的行为。里氏代换原则是对开闭原则的补充。实现开闭原则的关键步骤就是抽象化。而基类与子类的继承关系就是抽象化的具体实现，所以里氏代换原则是对实现抽象化的具体步骤的规范。</p><h4 id="_5、开闭原则" tabindex="-1"><a class="header-anchor" href="#_5、开闭原则" aria-hidden="true">#</a> 5、开闭原则</h4><p>（1）对于扩展是开放的（Open for extension）。这意味着模块的行为是可以扩展的。当应用的需求改变时，我们可以对模块进行扩展，使其具有满足那些改变的新行为。也就是说，我们可以改变模块的功能。</p><p>（2）对于修改是关闭的（Closed for modification）。对模块行为进行扩展时，不必改动模块的源代码或者二进制代码。模块的二进制可执行版本，无论是可链接的库、DLL或者.EXE文件，都无需改动。</p><h4 id="_6、迪米特法则" tabindex="-1"><a class="header-anchor" href="#_6、迪米特法则" aria-hidden="true">#</a> 6、迪米特法则</h4><p>迪米特法则又叫做最少知识原则，就是说一个对象应当对其它对象又尽可能少的了解，不和陌生人说话。</p><h4 id="_7、合成复用原则" tabindex="-1"><a class="header-anchor" href="#_7、合成复用原则" aria-hidden="true">#</a> 7、合成复用原则</h4><p>合成复用原则要求在软件复用时，要尽量先使用组合或者聚合等关联关系来实现，其次才考虑使用继承关系来实现。如果要使用继承关系，则必须严格遵循里氏替换原则。合成复用原则同里氏替换原则相辅相成的，两者都是开闭原则的具体实现规范。</p><h2 id="四、设计模式关系" tabindex="-1"><a class="header-anchor" href="#四、设计模式关系" aria-hidden="true">#</a> 四、设计模式关系</h2><h2 id="五、设计模式感想" tabindex="-1"><a class="header-anchor" href="#五、设计模式感想" aria-hidden="true">#</a> 五、设计模式感想</h2><p>一共有23种设计模式，可以说都是为了提高代码的可读性、可扩展性、可复用性、类的可替换性、组件化、可移植性等等特性。通过接口、抽象类、继承、实现、委托、抽象、面向接口编程、多态、重载、重写等方式使得代码的这些特性得以彰显，可以说只有深刻的理解了这些概念背后的哲学思想才能更好的理解设计模式。在设计模式中有很多思想，比如可以使用委托的不要使用继承、开闭原则，面向扩展开放，面向修改关闭，里式代换原则，父类一定能被子类代替并使用，反置则不然，面向接口编程，功能层次和实现层次分离（桥接模式）、高内聚低耦合等思想，这些思想都是宝贵的，正是因为这样的思想的存在才使得代码的更新换代的时候能够尽可能少的甚至不用修改之前的代码，直接加入新的内容。提高软件的开发周期，便于维护和升级，便于查找和纠错，易于扩展和使用。</p><p>同样的设计模式主要分为三大类，创建型、行为型、结构型。我们可以简单的这样分类，只不过这样的分类似乎并不准确，不能一语道出所有的本质，设计模式是相互关联的，有的设计模式内部其实是使用了别的设计模式作为支撑的，但是大体上这样的一种划分便于我们去记忆，仅此而已。</p><h2 id="六、设计模式回顾" tabindex="-1"><a class="header-anchor" href="#六、设计模式回顾" aria-hidden="true">#</a> 六、设计模式回顾</h2><p>从迭代器开始，我们将类中数据结构的遍历和类的功能实现分离出来，本质上使用了工厂模式；</p><p>其次我们学习了适配器模式，它将不同的接口进行适配，从而便于版本的兼容性以及其他功能；</p><p>然后我们学习了模板方法，使用模板面向抽象编程，便于新的子类的实现和管理；</p><p>之后学习了工厂模式，其实借用了模板模式来创建产品，是一种非常重要用处很广的一种方法；</p><p>然后我们学习了单例模式，有懒汉式、饿汉式等，生成关于某个类全局唯一的对象，注意多线程的影响；</p><p>之后是原型模式，用来复制复杂的对象，使用了clone方法，然后是builder模式，用一个新的类对已有的抽象接口进行整合和编程，从而构建出我们想要的东西；</p><p>然后是抽象工厂模式，使用了工厂模式，组合模式等模式，面向抽象编程，将抽象零件组装成抽象产品，便于具体工厂的创建，提高了代码的组件化和复用性；</p><p>然后是桥接模式，将类的功能层次和实现层次分割开来，便于对应的扩展和使用；</p><p>然后是策略模式，可以整体的替换策略，使用也很广泛；然后是组合模式，保证了同根同源，通过委托添加自己构成递归，树形结构，将具有树形特点的对象组合起来；</p><p>然后是装饰器模式，和组合模式的结构类似，同样是递归结构，从而可以不断的装饰，增加新的功能，很好用；</p><p>接着是visitor访问者模式，通过在类外访问类中的数据结构从而得到想要的结果，便于程序的可扩展性和组件化；</p><p>接着是责任链模式，推卸责任，根据问题的大小来考虑自己释放处理，本质是链表，便于职责分明；</p><p>然后是外观模式，通过整合各个类之间的调用关系，组建成了统一的接口(API)，便于外部类的调用；</p><p>接着是仲裁者模式，将很多类之间互相关联的关系交给仲裁者处理，省去了各个类之间的嵌套和调动，有利于高内聚和低耦合，思路清晰，便于扩展；</p><p>然后是观察者模式，通过互相委托从而能够在被观察的类发生改变的时候得到相应的改变的信息并且处理；</p><p>然后是备忘录模式，通过在某一时刻的状态保存下来，便于恢复，在游戏中使用的比较多；</p><p>然后是状态模式，将状态当做类，从而职责分明，解除了很多繁琐的if和else这些分支逻辑，便于扩展；</p><p>然后是享元模式，轻量级对象，通过共用不变对象来实现；</p><p>然后是代理模式，懒加载真正的服务器，加快访问速度，代理是帮助服务器代理的；</p><p>然后是命令模式，将命令当做类，通过保存一些列命令，从而能够随时执行这些命令，需要清除命令的本质就是一些操作和数据；</p><p>最后是解释器模式，利用编程原理的方法，来更高层次的封装代码，将自己开发的java代码当做编译系统，从而不用改变java代码只修改更高语言层次的代码就能实现不同的功能。</p>',42);function B(f,m){const t=h("RouterLink");return r(),E("div",null,[o,e("ol",null,[e("li",null,[l(t,{to:"/java/design/build/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F.html"},{default:i(()=>[a("单例模式")]),_:1}),a("：某个类智能有一个实例，提供一个全局的访问点。")]),e("li",null,[l(t,{to:"/java/design/build/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F.html"},{default:i(()=>[a("工厂模式")]),_:1}),a("：一个工厂类根据传入的参量决定创建出哪一种产品类的实例。")]),e("li",null,[l(t,{to:"/java/design/build/%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F.html"},{default:i(()=>[a("抽象工厂模式")]),_:1}),a("：创建相关或依赖对象的家族，而无需明确指定具体类。")]),e("li",null,[l(t,{to:"/java/design/build/%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F.html"},{default:i(()=>[a("建造者模式")]),_:1}),a("：封装一个复杂对象的创建过程，并可以按步骤构造。")]),e("li",null,[l(t,{to:"/java/design/build/%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F.html"},{default:i(()=>[a("原型模式")]),_:1}),a("：通过复制现有的实例来创建新的实例。")])]),u,A,e("ol",null,[e("li",null,[l(t,{to:"/java/design/structure/%E8%A3%85%E9%A5%B0%E5%99%A8%E6%A8%A1%E5%BC%8F.html"},{default:i(()=>[a("装饰器模式")]),_:1}),a("：动态的给对象添加新的功能。")]),e("li",null,[l(t,{to:"/java/design/structure/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F.html"},{default:i(()=>[a("代理模式")]),_:1}),a("：为其它对象提供一个代理以便控制这个对象的访问。")]),e("li",null,[l(t,{to:"/java/design/structure/%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F.html"},{default:i(()=>[a("桥接模式")]),_:1}),a("：将抽象部分和它的实现部分分离，使它们都可以独立的变化。")]),e("li",null,[l(t,{to:"/java/design/structure/%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F.html"},{default:i(()=>[a("适配器模式")]),_:1}),a("：将一个类的方法接口转换成客户希望的另一个接口。")]),e("li",null,[l(t,{to:"/java/design/structure/%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F.html"},{default:i(()=>[a("组合模式")]),_:1}),a("：将对象组合成树形结构以表示“部分-整体”的层次结构。")]),e("li",null,[l(t,{to:"/java/design/structure/%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F.html"},{default:i(()=>[a("外观模式")]),_:1}),a("：对外提供一个统一的方法，来访问子系统中的一群接口。")]),e("li",null,[l(t,{to:"/java/design/structure/%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F.html"},{default:i(()=>[a("享元模式")]),_:1}),a("：通过共享技术来有效的支持大量细粒度的对象。")])]),c,p,e("ol",null,[e("li",null,[l(t,{to:"/java/design/action/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F.html"},{default:i(()=>[a("策略模式")]),_:1}),a("：定义一系列算法，把他们封装起来，并且使它们可以相互替换。")]),e("li",null,[l(t,{to:"/java/design/action/%E6%A8%A1%E6%9D%BF%E6%A8%A1%E5%BC%8F.html"},{default:i(()=>[a("模板模式")]),_:1}),a("：定义一个算法结构，而将一些步骤延迟到子类实现。")]),e("li",null,[l(t,{to:"/java/design/action/%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F.html"},{default:i(()=>[a("命令模式")]),_:1}),a("：将命令请求封装为一个对象，使得可以用不同的请求来进行参数化。")]),e("li",null,[l(t,{to:"/java/design/action/%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F.html"},{default:i(()=>[a("迭代器模式")]),_:1}),a("：一种遍历访问聚合对象中各个元素的方法，不暴露该对象的内部结构。")]),e("li",null,[l(t,{to:"/java/design/action/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F.html"},{default:i(()=>[a("观察者模式")]),_:1}),a("：对象间的一对多的依赖关系。")]),e("li",null,[l(t,{to:"/java/design/action/%E4%B8%AD%E4%BB%8B%E8%80%85%E6%A8%A1%E5%BC%8F.html"},{default:i(()=>[a("中介者模式")]),_:1}),a("：用一个中介对象来封装一系列的对象交互。")]),e("li",null,[l(t,{to:"/java/design/action/%E5%A4%87%E5%BF%98%E5%BD%95%E6%A8%A1%E5%BC%8F.html"},{default:i(()=>[a("备忘录模式")]),_:1}),a("：在不破坏封装的前提下，保持对象的内部状态。")]),e("li",null,[l(t,{to:"/java/design/action/%E8%A7%A3%E9%87%8A%E5%99%A8%E6%A8%A1%E5%BC%8F.html"},{default:i(()=>[a("解释器模式")]),_:1}),a("：给定一个语言，定义它的文法的一种表示，并定义一个解释器。")]),e("li",null,[l(t,{to:"/java/design/action/%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F.html"},{default:i(()=>[a("状态模式")]),_:1}),a("：允许一个对象在其对象内部状态改变时改变它的行为。")]),e("li",null,[l(t,{to:"/java/design/action/%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%A8%A1%E5%BC%8F.html"},{default:i(()=>[a("责任链模式")]),_:1}),a("：将请求的发送者和接收者解耦，使的多个对象都有处理这个请求的机会。")]),e("li",null,[l(t,{to:"/java/design/action/%E8%AE%BF%E9%97%AE%E8%80%85%E6%A8%A1%E5%BC%8F.html"},{default:i(()=>[a("访问者模式")]),_:1}),a("：不改变数据结构的前提下，增加作用于一组对象元素的新功能。")])]),_])}const j=n(s,[["render",B],["__file","Java设计模式.html.vue"]]);export{j as default};
