import{_ as a,o as e,c as l,a as r}from"./app-999de8cb.js";const i={},n=r('<h1 id="垃圾收集算法" tabindex="-1"><a class="header-anchor" href="#垃圾收集算法" aria-hidden="true">#</a> 垃圾收集算法</h1><ul><li>分代收集理论</li><li>复制算法</li><li>标记整理算法</li><li>标记清楚算法</li></ul><h3 id="分代收集理论" tabindex="-1"><a class="header-anchor" href="#分代收集理论" aria-hidden="true">#</a> 分代收集理论</h3><p>​ 当前虚拟机的垃圾收集都采用分代收集算法，这种算法没有什么新的思想，只是根据对象存活周期的不同将内存分为几块。一般将java堆分为新生代和老年代，这样我们就可以根据各个年代的特点选择合适的垃圾收集算法。 比如在新生代中，每次收集都会有大量对象(近99%)死去，所以可以选择复制算法，只需要付出少量对象的复制成本就可以完成每次垃圾收集。而老年代的对象存活几率是比较高的，而且没有额外的空间对它进行分配担保，所以我们必须选择“标记-清除”或“标记-整理”算法进行垃圾收集。注意，“标记-清除”或“标记-整理”算法会比复制算法慢10倍以 上。</p><h3 id="标记-复制算法" tabindex="-1"><a class="header-anchor" href="#标记-复制算法" aria-hidden="true">#</a> 标记-复制算法</h3><p>​ 为了解决效率问题，“复制”收集算法出现了。它可以将内存分为大小相同的两块，每次使用其中的一块。当这一块的内存使用完后，就将还存活的对象复制到另一块去，然后再把使用的空间一次清理掉。这样就使每次的内存回收都是对 内存区间的一半进行回收。</p><h3 id="标记-清除算法" tabindex="-1"><a class="header-anchor" href="#标记-清除算法" aria-hidden="true">#</a> 标记-清除算法</h3><p>​ 算法分为“标记”和“清除”阶段：标记存活的对象， 统一回收所有未被标记的对象(一般选择这种)；也可以反过来，标记出所有需要回收的对象，在标记完成后统一回收所有被标记的对象 。</p><p>它是最基础的收集算法，比较简单，但是会带来 两个明显的问题：</p><ol><li>效率问题 (如果需要标记的对象太多，效率不高)</li><li>空间问题（标记清除后会产生大量不连续的碎片）</li></ol><h3 id="标记-整理算法" tabindex="-1"><a class="header-anchor" href="#标记-整理算法" aria-hidden="true">#</a> 标记-整理算法</h3><p>​ 根据老年代的特点特出的一种标记算法，标记过程仍然与“标记-清除”算法一样，但后续步骤不是直接对可回收对象回收，而是让所有存活的对象向一端移动，然后直接清理掉端边界以外的内存。</p><h1 id="垃圾收集器" tabindex="-1"><a class="header-anchor" href="#垃圾收集器" aria-hidden="true">#</a> 垃圾收集器</h1><p><img src="https://xqhuang.oss-cn-beijing.aliyuncs.com/study/垃圾收集器.png?versionId=CAEQERiBgMCAuLjD1BciIDJlNjUzZWQxNjhhNTQwMDhiM2UzZDc4NTljZTYxNmNh" alt="垃圾收集器"></p><h3 id="serial收集器-xx-useserialgc-xx-useserialoldgc" tabindex="-1"><a class="header-anchor" href="#serial收集器-xx-useserialgc-xx-useserialoldgc" aria-hidden="true">#</a> Serial收集器(-XX:+UseSerialGC -XX:+UseSerialOldGC)</h3><p>​ Serial（串行）收集器是最基本、历史最悠久的垃圾收集器了。大家看名字就知道这个收集器是一个单线程收集器了。它的 “单线程” 的意义不仅仅意味着它只会使用一条垃圾收集线程去完成垃圾收集工作，更重要的是它在进行垃圾收集工作的时候必须暂停其他所有的工作线程（ &quot;Stop The World&quot; ），直到它收集结束。</p><p><strong>新生代采用复制算法，老年代采用标记-整理算法</strong>。</p><p><img src="https://xqhuang.oss-cn-beijing.aliyuncs.com/study/Serial.png?versionId=CAEQERiBgMDI2NXD1BciIGFhNWExNmVkODI0MDRlNThiNjBjMGM1ZjYyMGZkMzVk" alt="Serial"></p><p>​ 虚拟机的设计者们当然知道Stop The World带来的不良用户体验，所以在后续的垃圾收集器设计中停顿时间在不断缩短（仍然还有停顿，寻找最优秀的垃圾收集器的过程仍然在继续）。 但是Serial收集器有没有优于其他垃圾收集器的地方呢？当然有，它简单而高效（与其他收集器的单线程相比）。Serial 收集器由于没有线程交互的开销，自然可以获得很高的单线程收集效率。 <strong>Serial Old收集器是Serial收集器的老年代版本</strong>，它同样是一个单线程收集器。它主要有两大用途：一种用途是在JDK1.5 以及以前的版本中与Parallel Scavenge收集器搭配使用，<strong>另一种用途是作为CMS收集器的后备方案</strong>。</p><h3 id="parallel-scavenge收集器-xx-useparallelgc-年轻代-xx-useparalleloldgc-老年代" tabindex="-1"><a class="header-anchor" href="#parallel-scavenge收集器-xx-useparallelgc-年轻代-xx-useparalleloldgc-老年代" aria-hidden="true">#</a> Parallel Scavenge收集器(-XX:+UseParallelGC(年轻代),-XX:+UseParallelOldGC(老年代))</h3><p>​ <strong>Parallel</strong>收集器其实就是<strong>Serial收集器的多线程版本</strong>，除了使用多线程进行垃圾收集外，其余行为（控制参数、收集算 法、回收策略等等）和Serial收集器类似。默认的收集线程数跟cpu核数相同，当然也可以用参数(- XX:ParallelGCThreads)指定收集线程数，但是一般不推荐修改。 ​ <strong>Parallel Scavenge收集器关注点是吞吐量（高效率的利用CPU）。CMS等垃圾收集器的关注点更多的是用户线程的停顿时间（提高用户体验）。所谓吞吐量就是CPU中用于运行用户代码的时间与CPU总消耗时间的比值</strong>。 Parallel Scavenge收集器提供了很多参数供用户找到最合适的停顿时间或最大吞吐量，如果对于收集器运作不太了解的话，可以 选择把内存管理优化交给虚拟机去完成也是一个不错的选择。</p><p><strong>新生代采用复制算法，老年代采用标记-整理算法</strong>。</p><p><img src="https://xqhuang.oss-cn-beijing.aliyuncs.com/study/Parallel.png?versionId=CAEQERiBgMDE2NXD1BciIGMwNWU2NzgzNmYwZDQ1ZTc5NWExMjZlNTZjOTViNTIy" alt="Parallel"></p><p>​ <strong>Parallel Old收集器是Parallel Scavenge收集器的老年代版本</strong>。使用多线程和“标记-整理”算法。在注重吞吐量以及CPU资源的场合，都可以优先考虑 Parallel Scavenge收集器和Parallel Old收集器(JDK8默认的新生代和老年代收集 器)。</p><h3 id="parnew收集器-xx-useparnewgc" tabindex="-1"><a class="header-anchor" href="#parnew收集器-xx-useparnewgc" aria-hidden="true">#</a> ParNew收集器(-XX:+UseParNewGC)</h3><p><strong>ParNew收集器其实跟Parallel收集器很类似</strong>，区别主要在于它可以和CMS收集器配合使用。</p><p><img src="https://xqhuang.oss-cn-beijing.aliyuncs.com/study/Parallel.png?versionId=CAEQERiBgMDE2NXD1BciIGMwNWU2NzgzNmYwZDQ1ZTc5NWExMjZlNTZjOTViNTIy" alt="ParNew"></p><p><strong>新生代采用复制算法，老年代采用标记-整理算法</strong>。</p><p>​ 它是许多运行在Server模式下的虚拟机的首要选择，除了Serial收集器外，只有它能与CMS收集器（真正意义上的并发收集器，后面会介绍到）配合工作。</p><h3 id="cms收集器-xx-useconcmarksweepgc-old" tabindex="-1"><a class="header-anchor" href="#cms收集器-xx-useconcmarksweepgc-old" aria-hidden="true">#</a> CMS收集器(-XX:+UseConcMarkSweepGC(old))</h3><p><strong>CMS（Concurrent Mark Sweep）收集器是一种以获取最短回收停顿时间为目标的收集器。它非常符合在注重用户体验的应用上使用，它是HotSpot虚拟机第一款真正意义上的并发收集器，它第一次实现了让垃圾收集线程与用户线程 （基本上）同时工作</strong>。 CMS收集器是一种 “标记-清除”算法实现的，它的运作过程相比于前面 几种垃圾收集器来说更加复杂一些。整个过程分为四个步骤：</p><ul><li><strong>初始标记</strong>： 暂停所有的其他线程(STW)，并记录下gc roots直接能引用的对象，速度很快。</li><li><strong>并发标记</strong>： 并发标记阶段就是从GC Roots的直接关联对象开始遍历整个对象图的过程， 这个过程耗时较长但是不需要停顿用户线程，可以与垃圾收集线程一起并发运行。因为用户程序继续运行，可能会有导致已经标记过的对象状态发生改变。</li><li><strong>重新标记</strong>： 重新标记阶段就是为了修正并发标记期间因为用户程序继续运行而导致标记产生变动的那一部分对象的标记记录，这个阶段的停顿时间一般会比初始标记阶段的时间稍长，远远比并发标记阶段时间短。主要用到三色标记里的增量更新算法(见下面详解)做重新标记。</li><li><strong>并发清理</strong>： 开启用户线程，同时GC线程开始对未标记的区域做清扫。这个阶段如果有新增对象会被标记为黑色不做任何处理(见下面三色标记算法详解)。</li><li><strong>并发重置</strong>：重置本次GC过程中的标记数据。</li></ul><p><img src="https://xqhuang.oss-cn-beijing.aliyuncs.com/study/cms.png?versionId=CAEQERiBgMCB2dXD1BciIDdlNGI1NTMwM2RhMDRkNjg5MjFmYWQ4OWQ4OWZiYzA5" alt="cms"></p><p>主要优点：并发收集、低停顿。</p><p>缺点：</p><ul><li>对CPU资源敏感（会和服务抢资源；</li><li>无法处理浮动垃圾(在并发标记和并发清理阶段又产生垃圾，这种浮动垃圾只能等到下一次gc再清理了)；</li><li>它使用的回收算法-“标记-清除”算法会导致收集结束时会有大量空间碎片产生，当然通过参数- XX:+UseCMSCompactAtFullCollection可以让jvm在执行完标记清除后再做整理</li><li>执行过程中的不确定性，会存在上一次垃圾回收还没执行完，然后垃圾回收又被触发的情况，特别是在并发标记和并发清理阶段会出现，一边回收，系统一边运行，也许没回收完就再次触发full gc，也就是&quot;concurrent mode failure&quot;，此时会进入stop the world，用serial old垃圾收集器来回收</li></ul><p>CMS的相关核心参数</p><ol><li>-XX:+UseConcMarkSweepGC：启用cms</li><li>-XX:ConcGCThreads：并发的GC线程数</li><li>-XX:+UseCMSCompactAtFullCollection：FullGC之后做压缩整理（减少碎片）</li><li>-XX:CMSFullGCsBeforeCompaction：多少次FullGC之后压缩一次，默认是0，代表每次FullGC后都会压缩一 次</li><li>-XX:CMSInitiatingOccupancyFraction: 当老年代使用达到该比例时会触发FullGC（默认是92，这是百分比）</li><li>-XX:+UseCMSInitiatingOccupancyOnly：只使用设定的回收阈值(-XX:CMSInitiatingOccupancyFraction设 定的值)，如果不指定，JVM仅在第一次使用设定值，后续则会自动调整</li><li>-XX:+CMSScavengeBeforeRemark：在CMS GC前启动一次minor gc，目的在于减少老年代对年轻代的引 用，降低CMS GC的标记阶段时的开销，一般CMS的GC耗时 80%都在标记阶段</li><li>-XX:+CMSParallellnitialMarkEnabled：表示在初始标记的时候多线程执行，缩短STW</li></ol><h1 id="垃圾收集底层算法实现" tabindex="-1"><a class="header-anchor" href="#垃圾收集底层算法实现" aria-hidden="true">#</a> 垃圾收集底层算法实现</h1><h3 id="三色标记" tabindex="-1"><a class="header-anchor" href="#三色标记" aria-hidden="true">#</a> 三色标记</h3><p>在并发标记的过程中，因为标记期间应用线程还在继续跑，对象间的引用可能发生变化，多标和漏标的情况就有可能发生。</p><p>Gcroots可达性分析遍历对象过程中遇到的对象， 按照“是否访问过”这个条件标记成以下三种颜色：</p><ul><li><strong>黑色</strong>： 表示对象已经被垃圾收集器访问过， 且这个对象的所有引用都已经扫描过。 黑色的对象代表已经扫描过，它是安全存活的，如果有其他对象引用指向了黑色对象， 无须重新扫描一遍。 黑色对象不可能直接（不经过 灰色对象） 指向某个白色对象。</li><li><strong>灰色</strong>： 表示对象已经被垃圾收集器访问过， 但这个对象上至少存在一个引用还没有被扫描过。</li><li><strong>白色</strong>： 表示对象尚未被垃圾收集器访问过。 显然在可达性分析刚刚开始的阶段， 所有的对象都是白色的， 若在分析结束的阶段， 仍然是白色的对象， 即代表不可达。</li></ul><h3 id="多标-浮动垃圾" tabindex="-1"><a class="header-anchor" href="#多标-浮动垃圾" aria-hidden="true">#</a> 多标-浮动垃圾</h3><p>​ 在并发标记过程中，如果由于方法运行结束导致部分局部变量(gc root)被销毁，这个gcroot引用的对象之前又被扫描过 (被标记为非垃圾对象)，那么本轮GC不会回收这部分内存。这部分本应该回收但是没有回收到的内存，被称之为“浮动 垃圾”。浮动垃圾并不会影响垃圾回收的正确性，只是需要等到下一轮垃圾回收中才被清除。 另外，针对并发标记(还有并发清理)开始后产生的新对象，通常的做法是直接全部当成黑色，本轮不会进行清除。这部分 对象期间可能也会变为垃圾，这也算是浮动垃圾的一部分。</p><h3 id="漏标-读写屏障" tabindex="-1"><a class="header-anchor" href="#漏标-读写屏障" aria-hidden="true">#</a> 漏标-读写屏障</h3><p>漏标会导致被引用的对象被当成垃圾误删除，这是严重bug，必须解决，有两种解决方案：</p><blockquote><ol><li>增量更新（Incremental Update）</li><li>原始快照（Snapshot At The Beginning，SATB） 。</li></ol></blockquote><ul><li><strong>增量更新</strong>就是当黑色对象插入新的指向白色对象的引用关系时， 就将这个新插入的引用记录下来， 等并发扫描结束之后， 再将这些记录过的引用关系中的黑色对象为根， 重新扫描一次。 这可以简化理解为， 黑色对象一旦新插入了指向白色对象的引用之后， 它就变回灰色对象了。</li><li><strong>原始快照</strong>就是当灰色对象要删除指向白色对象的引用关系时， 就将这个要删除的引用记录下来， 在并发扫描结束之后， 再将这些记录过的引用关系中的灰色对象为根， 重新扫描一次，这样就能扫描到白色的对象，将白色对象直接标记为黑色(<strong>目的就是让这种对象在本轮gc清理中能存活下来，待下一轮gc的时候重新扫描，这个对象也有可能是浮动垃圾</strong>) 以上无论是对引用关系记录的插入还是删除， 虚拟机的记录操作都是通过写屏障实现的。</li></ul><p>现代追踪式（可达性分析）的垃圾回收器几乎都借鉴了三色标记的算法思想，尽管实现的方式不尽相同：比如白色/黑色集合一般都不会出现（但是有其他体现颜色的地方）、灰色集合可以通过栈/队列/缓存日志等方式进行实现、遍历方式可 以是广度/深度遍历等等。</p><p>对于读写屏障，以Java HotSpot VM为例，其并发标记时对漏标的处理方案如下：</p><ul><li>CMS：写屏障 + 增量更新</li><li>G1，Shenandoah：写屏障 + SATB</li><li>ZGC：读屏障</li></ul><p>工程实现中，读写屏障还有其他功能，比如写屏障可以用于记录跨代/区引用的变化，读屏障可以用于支持移动对象的并 发执行等。功能之外，还有性能的考虑，所以对于选择哪种，每款垃圾回收器都有自己的想法。</p><h3 id="为什么g1用satb-cms用增量更新" tabindex="-1"><a class="header-anchor" href="#为什么g1用satb-cms用增量更新" aria-hidden="true">#</a> 为什么G1用SATB？CMS用增量更新？</h3><blockquote><p>SATB相对增量更新效率会高(当然SATB可能造成更多的浮动垃圾)，因为不需要在重新标记阶段再次深度扫描 被删除引用对象，而CMS对增量引用的根对象会做深度扫描，G1因为很多对象都位于不同的region，CMS就一块老年代 区域，重新深度扫描对象的话G1的代价会比CMS高，所以G1选择SATB不深度扫描对象，只是简单标记，等到下一轮GC再深度扫描。</p></blockquote><h1 id="记忆集与卡表" tabindex="-1"><a class="header-anchor" href="#记忆集与卡表" aria-hidden="true">#</a> 记忆集与卡表</h1><p>​ 在新生代做GCRoots可达性扫描过程中可能会碰到跨代引用的对象，这种如果又去对老年代再去扫描效率太低了。 为此，在新生代可以引入记录集（Remember Set）的数据结构（记录从非收集区到收集区的指针集合），避免把整个老年代加入GCRoots扫描范围。事实上并不只是新生代、 老年代之间才有跨代引用的问题， 所有涉及部分区域收集 （Partial GC） 行为的垃圾收集器， 典型的如G1、 ZGC和Shenandoah收集器， 都会面临相同的问题。 垃圾收集场景中，收集器只需通过记忆集判断出某一块非收集区域是否存在指向收集区域的指针即可，无需了解跨代引 用指针的全部细节。 hotspot使用一种叫做“卡表”(cardtable)的方式实现记忆集，也是目前最常用的一种方式。关于卡表与记忆集的关系， 可以类比为Java语言中HashMap与Map的关系。 卡表是使用一个字节数组实现：CARD_TABLE[ ]，每个元素对应着其标识的内存区域一块特定大小的内存块，称为“卡 页”。 hotSpot使用的卡页是2^9大小，即512字节。</p><p>一个卡页中可包含多个对象，只要有一个对象的字段存在跨代指针，其对应的卡表的元素标识就变成1，表示该元素变脏，否则为0. GC时，只要筛选本收集区的卡表中变脏的元素加入GCRoots里。</p><h3 id="卡表的维护" tabindex="-1"><a class="header-anchor" href="#卡表的维护" aria-hidden="true">#</a> 卡表的维护</h3><p>卡表变脏上面已经说了，但是需要知道如何让卡表变脏，即发生引用字段赋值时，如何更新卡表对应的标识为1。 Hotspot使用写屏障维护卡表状态。</p>',60),s=[n];function o(t,c){return e(),l("div",null,s)}const d=a(i,[["render",o],["__file","垃圾收集器ParNew和CMS.html.vue"]]);export{d as default};
