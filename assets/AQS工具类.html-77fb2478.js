import{_ as e,o as a,c as i,a as r}from"./app-999de8cb.js";const d={},n=r(`<h1 id="aqs工具类" tabindex="-1"><a class="header-anchor" href="#aqs工具类" aria-hidden="true">#</a> AQS工具类</h1><h2 id="blockingqueue" tabindex="-1"><a class="header-anchor" href="#blockingqueue" aria-hidden="true">#</a> BlockingQueue</h2><h3 id="概要" tabindex="-1"><a class="header-anchor" href="#概要" aria-hidden="true">#</a> 概要</h3><p>BlockingQueue，是java.util.concurrent 包提供的用于解决并发生产者 - 消费者问题 的最有用的类，它的特性是在任意时刻只有一个线程可以进行take或者put操作，并且 BlockingQueue提供了超时return null的机制，在许多生产场景里都可以看到这个工具的 身影。</p><h3 id="队列类型" tabindex="-1"><a class="header-anchor" href="#队列类型" aria-hidden="true">#</a> 队列类型</h3><ul><li>无限队列 （unbounded queue ） - 几乎可以无限增长</li><li>有限队列 （ bounded queue ） - 定义了最大容量</li></ul><h3 id="队列数据结构" tabindex="-1"><a class="header-anchor" href="#队列数据结构" aria-hidden="true">#</a> 队列数据结构</h3><pre><code>&gt; 队列实质就是一种存储数据的结构
</code></pre><ul><li>通常用链表或者数组实现</li><li>一般而言队列具备FIFO先进先出的特性，当然也有双端队列（Deque）优先级</li><li>队列主要操作：入队（EnQueue）与出队（Dequeue）</li></ul><h3 id="常见的4种阻塞队列" tabindex="-1"><a class="header-anchor" href="#常见的4种阻塞队列" aria-hidden="true">#</a> 常见的4种阻塞队列</h3><ul><li>ArrayBlockingQueue 由数组支持的有界队列</li><li>LinkedBlockingQueue 由链接节点支持的可选有界队列</li><li>PriorityBlockingQueue 由优先级堆支持的无界优先级队列</li><li>DelayQueue 由优先级堆支持的、基于时间的调度队列</li></ul><h3 id="arrayblockingqueue" tabindex="-1"><a class="header-anchor" href="#arrayblockingqueue" aria-hidden="true">#</a> ArrayBlockingQueue</h3><p>队列基于数组实现,容量大小在创建ArrayBlockingQueue对象时已定义好数据结构。</p><h4 id="应用场景" tabindex="-1"><a class="header-anchor" href="#应用场景" aria-hidden="true">#</a> 应用场景</h4><p>在线程池中有比较多的应用，生产者消费者场景</p><h4 id="工作原理" tabindex="-1"><a class="header-anchor" href="#工作原理" aria-hidden="true">#</a> 工作原理</h4><p>基于ReentrantLock保证线程安全，根据Condition实现队列满时的阻塞</p><h3 id="linkedblockingqueue" tabindex="-1"><a class="header-anchor" href="#linkedblockingqueue" aria-hidden="true">#</a> LinkedBlockingQueue</h3><p>是一个基于链表的无界队列(理论上有界， blockingQueue 的容量将设置为 Integer.MAX_VALUE 。)</p><p>向无限队列添加元素的所有操作都将永远不会阻塞，[注意这里不是说不会加锁保证线程安全]，因此它可以增长到非常大的容量。 使用无限 BlockingQueue 设计生产者 - 消费者模型时最重要的是 消费者应该能够像生产 者向队列添加消息一样快地消费消息 。否则，内存可能会填满，然后就会得到一 个 OutOfMemory 异常。</p><h3 id="delayqueue" tabindex="-1"><a class="header-anchor" href="#delayqueue" aria-hidden="true">#</a> DelayQueue</h3><p>由优先级堆支持的、基于时间的调度队列，内部基于无界队列PriorityQueue实现，而无界 队列基于数组的扩容实现。</p><h4 id="要求" tabindex="-1"><a class="header-anchor" href="#要求" aria-hidden="true">#</a> 要求</h4><p>入队的对象必须要实现Delayed接口,而Delayed集成自Comparable接口</p><h3 id="应用场景-1" tabindex="-1"><a class="header-anchor" href="#应用场景-1" aria-hidden="true">#</a> 应用场景</h3><p>电影票</p><h3 id="工作原理-1" tabindex="-1"><a class="header-anchor" href="#工作原理-1" aria-hidden="true">#</a> 工作原理</h3><p>队列内部会根据时间优先级进行排序。延迟类线程池周期执行。</p><p>#Semaphore Semaphore 字面意思是信号量的意思，它的作用是控制访问特定资源的线程数目，底层依 赖AQS的状态State，是在生产当中比较常用的一个工具类。</p><h3 id="构造方法" tabindex="-1"><a class="header-anchor" href="#构造方法" aria-hidden="true">#</a> 构造方法</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>    public Semaphore(int permits)  
    public Semaphore(int permits, boolean fair)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>permits 表示许可线程的数量</li><li>fair 表示公平性，如果这个设为 true 的话，下次执行的线程会是等待最久的线程</li></ul><h3 id="重要方法" tabindex="-1"><a class="header-anchor" href="#重要方法" aria-hidden="true">#</a> 重要方法</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>    public void acquire() throws InterruptedException 
    public void release() 
    tryAcquire（long timeout, TimeUnit unit）
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>acquire() 表示阻塞并获取许可</li><li>release() 表示释放许可</li></ul><h3 id="基本使用" tabindex="-1"><a class="header-anchor" href="#基本使用" aria-hidden="true">#</a> 基本使用</h3><h4 id="需求场景" tabindex="-1"><a class="header-anchor" href="#需求场景" aria-hidden="true">#</a> 需求场景</h4><p>资源访问，服务限流(Hystrix里限流就有基于信号量方式)。</p><h1 id="countdownlatch" tabindex="-1"><a class="header-anchor" href="#countdownlatch" aria-hidden="true">#</a> CountDownLatch</h1><p>CountDownLatch这个类能够使一个线程等待其他线程完成各自的工作后再执行。例 如，应用程序的主线程希望在负责启动框架服务的线程已经启动所有的框架服务之后再执 行。</p><h3 id="使用场景" tabindex="-1"><a class="header-anchor" href="#使用场景" aria-hidden="true">#</a> 使用场景：</h3><p>Zookeeper分布式锁,Jmeter模拟高并发等</p><h3 id="countdownlatch如何工作" tabindex="-1"><a class="header-anchor" href="#countdownlatch如何工作" aria-hidden="true">#</a> CountDownLatch如何工作？</h3><p>CountDownLatch是通过一个计数器来实现的，计数器的初始值为线程的数量。每当 一个线程完成了自己的任务后，计数器的值就会减1。当计数器值到达0时，它表示所有的 线程已经完成了任务，然后在闭锁上等待的线程就可以恢复执行任务。</p><h3 id="api" tabindex="-1"><a class="header-anchor" href="#api" aria-hidden="true">#</a> API</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>    CountDownLatch.countDown() 
    CountDownLatch.await();
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="cyclicbarrier" tabindex="-1"><a class="header-anchor" href="#cyclicbarrier" aria-hidden="true">#</a> CyclicBarrier</h1><p>栅栏屏障，让一组线程到达一个屏障（也可以叫同步点）时被阻塞，直到最后一个线程 到达屏障时，屏障才会开门，所有被屏障拦截的线程才会继续运行。</p><p>CyclicBarrier默认的构造方法是CyclicBarrier（int parties），其参数表示屏障拦截的线 程数量，每个线程调用await方法告CyclicBarrier我已经到达了屏障，然后当前线程被阻塞。</p><h3 id="api-1" tabindex="-1"><a class="header-anchor" href="#api-1" aria-hidden="true">#</a> API</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>    cyclicBarrier.await();
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h1 id="executors" tabindex="-1"><a class="header-anchor" href="#executors" aria-hidden="true">#</a> Executors</h1><p>主要用来创建线程池，代理了线程池的创建，使得你的创建入口参数变得简单</p><h3 id="重要方法-1" tabindex="-1"><a class="header-anchor" href="#重要方法-1" aria-hidden="true">#</a> 重要方法</h3><ul><li>newCachedThreadPool 创建一个可缓存线程池，如果线程池长度超过处理需要，可灵活回收空闲线程，若无可回收，则新建线程。</li><li>newFixedThreadPool 创建一个定长线程池，可控制线程最大并发数，超出的线程会在队列中等待。</li><li>newScheduledThreadPool 创建一个定长线程池，支持定时及周期性任务执行。</li><li>newSingleThreadExecutor 创建一个单线程化的线程池，它只会用唯一的工作线程来执行任务，保证所有任务按照指定顺序(FIFO, LIFO, 优先级)执行。</li></ul><h1 id="exchanger" tabindex="-1"><a class="header-anchor" href="#exchanger" aria-hidden="true">#</a> Exchanger</h1><p>当一个线程运行到exchange()方法时会阻塞，另一个线程运行到exchange()时，二者 交换数据，然后执行后面的程序。</p>`,57),h=[n];function l(c,t){return a(),i("div",null,h)}const o=e(d,[["render",l],["__file","AQS工具类.html.vue"]]);export{o as default};
