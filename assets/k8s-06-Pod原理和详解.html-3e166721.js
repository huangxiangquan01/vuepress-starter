import{_ as n,o as s,c as a,a as e}from"./app-999de8cb.js";const t={},l=e(`<h1 id="kubernetes-pod" tabindex="-1"><a class="header-anchor" href="#kubernetes-pod" aria-hidden="true">#</a> Kubernetes Pod</h1><h2 id="_6-kubernetes-pod-介绍" tabindex="-1"><a class="header-anchor" href="#_6-kubernetes-pod-介绍" aria-hidden="true">#</a> 6.Kubernetes Pod 介绍</h2><h3 id="_1-pod-介绍与原理讲解" tabindex="-1"><a class="header-anchor" href="#_1-pod-介绍与原理讲解" aria-hidden="true">#</a> 1. Pod 介绍与原理讲解</h3><p>是 Kubernetes 项目中最小的 API 对象。如果换一个更专业的说法，我们可以这样描述： Pod，是 Kubernetes 项目的原子调度单位。</p><p>Pod 是运行服务的基础。基础容器是 pause。 每启动一个Pod 都会附加启动这样一个容器，它的作用就只是简单的等待，设置 Pod 的网 络。 一个 Pod 中的应用容器共享同一组资源：</p><ol><li>PID 命名空间：Pod 中的不同应用程序可以看见其他应用程序的进程 ID</li><li>网络命名空间：Pod 中的多个容器能访问同一个 IP 和端口范围</li><li>IPC 命名空间：Pod 中的多个容器能够使用 SystemV IPC 或 POSIX 消息队列进行通信。</li><li>UTS 命名空间：Pod 中的多个容器共享一个主机名</li><li>Volumes(共享存储卷):Pod 中的各个容器可以访问在 Pod 级别定义的 Volumes</li></ol><p>每个 pod 中容器的镜像应该不同（不同的应用），避免端口重复</p><blockquote><ul><li>最小操作但愿</li><li>Pod内容器共享资源</li><li>生命周期管理：挂起、运行、成功、失败、未知</li><li>容器探测：LivenessProbe ReadinessProbe</li><li>容器配额：request limit</li></ul></blockquote><h3 id="_2-pod-创建与删除" tabindex="-1"><a class="header-anchor" href="#_2-pod-创建与删除" aria-hidden="true">#</a> 2. Pod 创建与删除</h3><h4 id="_1-kubectl-创建-pod" tabindex="-1"><a class="header-anchor" href="#_1-kubectl-创建-pod" aria-hidden="true">#</a> 1.kubectl 创建 Pod</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>kubectl run nginx <span class="token parameter variable">--image</span><span class="token operator">=</span>nginx:1.9 –port<span class="token operator">=</span><span class="token number">80</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>状态检查：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>kubectl get pod name
kubectl describe pod name
kubectl logs name
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-yaml-基本语法规则" tabindex="-1"><a class="header-anchor" href="#_2-yaml-基本语法规则" aria-hidden="true">#</a> 2.Yaml 基本语法规则</h4><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token comment"># yaml格式的pod定义文件完整内容：</span>
<span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1       <span class="token comment">#必选，版本号，例如v1</span>
<span class="token key atrule">kind</span><span class="token punctuation">:</span> Pod       <span class="token comment">#必选，Pod</span>
<span class="token key atrule">metadata</span><span class="token punctuation">:</span> <span class="token comment">#必选，元数据</span>
  <span class="token key atrule">name</span><span class="token punctuation">:</span> string       <span class="token comment">#必选，Pod名称</span>
  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> string    <span class="token comment">#必选，Pod所属的命名空间</span>
  <span class="token key atrule">labels</span><span class="token punctuation">:</span> <span class="token comment">#自定义标签</span>
    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> string     <span class="token comment">#自定义标签名字</span>
  <span class="token key atrule">annotations</span><span class="token punctuation">:</span> <span class="token comment">#自定义注释列表</span>
    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> string
<span class="token key atrule">spec</span><span class="token punctuation">:</span> <span class="token comment">#必选，Pod中容器的详细定义</span>
  <span class="token key atrule">containers</span><span class="token punctuation">:</span> <span class="token comment">#必选，Pod中容器列表</span>
    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> string     <span class="token comment">#必选，容器名称</span>
      <span class="token key atrule">image</span><span class="token punctuation">:</span> string    <span class="token comment">#必选，容器的镜像名称</span>
      <span class="token key atrule">imagePullPolicy</span><span class="token punctuation">:</span> <span class="token punctuation">[</span> Always <span class="token punctuation">|</span> Never <span class="token punctuation">|</span> IfNotPresent <span class="token punctuation">]</span> <span class="token comment">#获取镜像的策略 Alawys表示下载镜像 IfnotPresent表示优先使用本地镜像，否则下载镜像，Nerver表示仅使用本地镜像</span>
      <span class="token key atrule">command</span><span class="token punctuation">:</span> <span class="token punctuation">[</span> string <span class="token punctuation">]</span>    <span class="token comment">#容器的启动命令列表，如不指定，使用打包时使用的启动命令</span>
      <span class="token key atrule">args</span><span class="token punctuation">:</span> <span class="token punctuation">[</span> string <span class="token punctuation">]</span>     <span class="token comment">#容器的启动命令参数列表</span>
      <span class="token key atrule">workingDir</span><span class="token punctuation">:</span> string     <span class="token comment">#容器的工作目录</span>
      <span class="token key atrule">volumeMounts</span><span class="token punctuation">:</span> <span class="token comment">#挂载到容器内部的存储卷配置</span>
        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> string     <span class="token comment">#引用pod定义的共享存储卷的名称，需用volumes[]部分定义的的卷名</span>
          <span class="token key atrule">mountPath</span><span class="token punctuation">:</span> string    <span class="token comment">#存储卷在容器内mount的绝对路径，应少于512字符</span>
          <span class="token key atrule">readOnly</span><span class="token punctuation">:</span> boolean    <span class="token comment">#是否为只读模式</span>
      <span class="token key atrule">ports</span><span class="token punctuation">:</span> <span class="token comment">#需要暴露的端口库号列表</span>
        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> string     <span class="token comment">#端口号名称</span>
          <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> int   <span class="token comment">#容器需要监听的端口号</span>
          <span class="token key atrule">hostPort</span><span class="token punctuation">:</span> int    <span class="token comment">#容器所在主机需要监听的端口号，默认与Container相同</span>
          <span class="token key atrule">protocol</span><span class="token punctuation">:</span> string     <span class="token comment">#端口协议，支持TCP和UDP，默认TCP</span>
      <span class="token key atrule">env</span><span class="token punctuation">:</span> <span class="token comment">#容器运行前需设置的环境变量列表</span>
        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> string     <span class="token comment">#环境变量名称</span>
          <span class="token key atrule">value</span><span class="token punctuation">:</span> string    <span class="token comment">#环境变量的值</span>
      <span class="token key atrule">resources</span><span class="token punctuation">:</span> <span class="token comment">#资源限制和请求的设置</span>
        <span class="token key atrule">limits</span><span class="token punctuation">:</span> <span class="token comment">#资源限制的设置</span>
          <span class="token key atrule">cpu</span><span class="token punctuation">:</span> string    <span class="token comment">#Cpu的限制，单位为core数，将用于docker run --cpu-shares参数</span>
          <span class="token key atrule">memory</span><span class="token punctuation">:</span> string     <span class="token comment">#内存限制，单位可以为Mib/Gib，将用于docker run --memory参数</span>
        <span class="token key atrule">requests</span><span class="token punctuation">:</span> <span class="token comment">#资源请求的设置</span>
          <span class="token key atrule">cpu</span><span class="token punctuation">:</span> string    <span class="token comment">#Cpu请求，容器启动的初始可用数量</span>
          <span class="token key atrule">memory</span><span class="token punctuation">:</span> string     <span class="token comment">#内存清楚，容器启动的初始可用数量</span>
      <span class="token key atrule">livenessProbe</span><span class="token punctuation">:</span> <span class="token comment">#对Pod内个容器健康检查的设置，当探测无响应几次后将自动重启该容器，检查方法有exec、httpGet和tcpSocket，对一个容器只需设置其中一种方法即可</span>
        <span class="token key atrule">exec</span><span class="token punctuation">:</span> <span class="token comment">#对Pod容器内检查方式设置为exec方式</span>
          <span class="token key atrule">command</span><span class="token punctuation">:</span> <span class="token punctuation">[</span> string <span class="token punctuation">]</span>  <span class="token comment">#exec方式需要制定的命令或脚本</span>
        <span class="token key atrule">httpGet</span><span class="token punctuation">:</span> <span class="token comment">#对Pod内个容器健康检查方法设置为HttpGet，需要制定Path、port</span>
          <span class="token key atrule">path</span><span class="token punctuation">:</span> string
          <span class="token key atrule">port</span><span class="token punctuation">:</span> number
          <span class="token key atrule">host</span><span class="token punctuation">:</span> string
          <span class="token key atrule">scheme</span><span class="token punctuation">:</span> string
          <span class="token key atrule">HttpHeaders</span><span class="token punctuation">:</span>
          <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> string
            <span class="token key atrule">value</span><span class="token punctuation">:</span> string
        <span class="token key atrule">tcpSocket</span><span class="token punctuation">:</span> <span class="token comment">#对Pod内个容器健康检查方式设置为tcpSocket方式</span>
          <span class="token key atrule">port</span><span class="token punctuation">:</span> number
          <span class="token key atrule">initialDelaySeconds</span><span class="token punctuation">:</span> <span class="token number">0</span>  <span class="token comment">#容器启动完成后首次探测的时间，单位为秒</span>
          <span class="token key atrule">timeoutSeconds</span><span class="token punctuation">:</span> <span class="token number">0</span>   <span class="token comment">#对容器健康检查探测等待响应的超时时间，单位秒，默认1秒</span>
          <span class="token key atrule">periodSeconds</span><span class="token punctuation">:</span> <span class="token number">0</span>    <span class="token comment">#对容器监控检查的定期探测时间设置，单位秒，默认10秒一次</span>
          <span class="token key atrule">successThreshold</span><span class="token punctuation">:</span> <span class="token number">0</span>
          <span class="token key atrule">failureThreshold</span><span class="token punctuation">:</span> <span class="token number">0</span>
          <span class="token key atrule">securityContext</span><span class="token punctuation">:</span>
            privileged<span class="token punctuation">:</span><span class="token boolean important">false</span>
      <span class="token key atrule">restartPolicy</span><span class="token punctuation">:</span> <span class="token punctuation">[</span> Always <span class="token punctuation">|</span> Never <span class="token punctuation">|</span> OnFailure<span class="token punctuation">]</span> <span class="token comment">#Pod的重启策略，Always表示一旦不管以何种方式终止运行，kubelet都将重启，OnFailure表示只有Pod以非0退出码退出才重启，Nerver表示不再重启该Pod</span>
      <span class="token key atrule">nodeSelector</span><span class="token punctuation">:</span>   <span class="token comment">#设置NodeSelector表示将该Pod调度到包含这个label的node上，以key：value的格式指定</span>
      <span class="token key atrule">imagePullSecrets</span><span class="token punctuation">:</span>  <span class="token comment">#Pull镜像时使用的secret名称，以key：secretkey格式指定</span>
      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> string
      <span class="token key atrule">hostNetwork</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>      <span class="token comment">#是否使用主机网络模式，默认为false，如果设置为true，表示使用宿主机网络</span>
      <span class="token key atrule">volumes</span><span class="token punctuation">:</span> <span class="token comment">#在该pod上定义共享存储卷列表</span>
      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> string     <span class="token comment">#共享存储卷名称 （volumes类型有很多种）</span>
        <span class="token key atrule">emptyDir</span><span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>     <span class="token comment">#类型为emtyDir的存储卷，与Pod同生命周期的一个临时目录。为空值</span>
        <span class="token key atrule">hostPath</span><span class="token punctuation">:</span> string     <span class="token comment">#类型为hostPath的存储卷，表示挂载Pod所在宿主机的目录</span>
        <span class="token key atrule">path</span><span class="token punctuation">:</span> string     <span class="token comment">#Pod所在宿主机的目录，将被用于同期中mount的目录</span>
        <span class="token key atrule">secret</span><span class="token punctuation">:</span> <span class="token comment">#类型为secret的存储卷，挂载集群与定义的secre对象到容器内部</span>
          <span class="token key atrule">scretname</span><span class="token punctuation">:</span> string
          <span class="token key atrule">items</span><span class="token punctuation">:</span>
          <span class="token punctuation">-</span> <span class="token key atrule">key</span><span class="token punctuation">:</span> string
            <span class="token key atrule">path</span><span class="token punctuation">:</span> string
        <span class="token key atrule">configMap</span><span class="token punctuation">:</span> <span class="token comment">#类型为configMap的存储卷，挂载预定义的configMap对象到容器内部</span>
          <span class="token key atrule">name</span><span class="token punctuation">:</span> string
          <span class="token key atrule">items</span><span class="token punctuation">:</span>
          <span class="token punctuation">-</span> <span class="token key atrule">key</span><span class="token punctuation">:</span> string
            <span class="token key atrule">path</span><span class="token punctuation">:</span> string
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-yaml-文件创建-pod" tabindex="-1"><a class="header-anchor" href="#_3-yaml-文件创建-pod" aria-hidden="true">#</a> 3.Yaml 文件创建 Pod</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>kubectl run nginx <span class="token parameter variable">--image</span><span class="token operator">=</span>nginx <span class="token parameter variable">--port</span><span class="token operator">=</span><span class="token number">80</span> --dry-run<span class="token operator">=</span>client <span class="token parameter variable">-o</span> yaml<span class="token operator">&gt;</span>nginx.yaml

<span class="token function">cat</span> nginx.yaml
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1
<span class="token key atrule">kind</span><span class="token punctuation">:</span> Pod
<span class="token key atrule">metadata</span><span class="token punctuation">:</span>
  <span class="token key atrule">creationTimestamp</span><span class="token punctuation">:</span> <span class="token null important">null</span>
  <span class="token key atrule">labels</span><span class="token punctuation">:</span>
  <span class="token key atrule">run</span><span class="token punctuation">:</span> nginx
  <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx
<span class="token key atrule">spec</span><span class="token punctuation">:</span>
  <span class="token key atrule">containers</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token key atrule">image</span><span class="token punctuation">:</span> nginx
  <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx
  <span class="token key atrule">ports</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">80</span>
  <span class="token key atrule">resources</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token key atrule">dnsPolicy</span><span class="token punctuation">:</span> ClusterFirst
  <span class="token key atrule">restartPolicy</span><span class="token punctuation">:</span> Always
<span class="token key atrule">status</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-多容器-pod-创建" tabindex="-1"><a class="header-anchor" href="#_4-多容器-pod-创建" aria-hidden="true">#</a> 4.多容器 Pod 创建</h4><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1
<span class="token key atrule">kind</span><span class="token punctuation">:</span> Pod
<span class="token key atrule">metadata</span><span class="token punctuation">:</span>
  <span class="token key atrule">creationTimestamp</span><span class="token punctuation">:</span> <span class="token null important">null</span>
  <span class="token key atrule">labels</span><span class="token punctuation">:</span>
    <span class="token key atrule">run</span><span class="token punctuation">:</span> nginx
  <span class="token key atrule">name</span><span class="token punctuation">:</span> multi<span class="token punctuation">-</span>container
<span class="token key atrule">spec</span><span class="token punctuation">:</span>
  <span class="token key atrule">containers</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token key atrule">image</span><span class="token punctuation">:</span> nginx
    <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx
    <span class="token key atrule">ports</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">80</span>
    <span class="token key atrule">resources</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token punctuation">-</span> <span class="token key atrule">image</span><span class="token punctuation">:</span> tomcat
    <span class="token key atrule">name</span><span class="token punctuation">:</span> tomcat
    <span class="token key atrule">ports</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">8080</span>
  <span class="token key atrule">dnsPolicy</span><span class="token punctuation">:</span> ClusterFirst
  <span class="token key atrule">restartPolicy</span><span class="token punctuation">:</span> Always
<span class="token key atrule">status</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-pod-生命周期管理" tabindex="-1"><a class="header-anchor" href="#_3-pod-生命周期管理" aria-hidden="true">#</a> 3. Pod 生命周期管理</h3><p>Pod 在整个生命周期过程中被系统定义为各种状态，熟悉 Pod 的各种状态对于我们理解如何设置 Pod 的调度策略、重启策略是很有必要的。 Pod 状态如表所示：</p><table><thead><tr><th>状态值</th><th>描述</th></tr></thead><tbody><tr><td>Pending</td><td>API Server已经创建该Pod，但在Pod内还有一个或多个容器对镜像没有创建，包括正在下载镜像对过程</td></tr><tr><td>Running</td><td>Pod内所有容器均已创建，且至少有一个容器处于运行状态，正在启动状态对或正在重启状态</td></tr><tr><td>Succeeded</td><td>Pod内所有容器均成功执行后退出，且不会重启</td></tr><tr><td>Failed</td><td>Pod内所有容器均已退出，但至少有一个容器退出为失败状态</td></tr><tr><td>Unknown</td><td>由于某种原因无法获取该Pod的状态，可能由于网络通信导致</td></tr></tbody></table><p>Pod 的重启策略（ RestartPolicy ）应用于 Pod 内的所有容器，并且仅在 Pod 所处的 Node 上由 kubelet 进行判断和重启操作。 当某个容器异常退出或者健康检查失败时， kubelet 将根据 RestartPolicy 的设置来进行相应的操作 。</p><p>Pod 的重启策略包括 Always 、 OnFailure 和 Never ， 默认值为 Always 。</p><blockquote><ul><li>Always ： 当容器失效时，由 kubelet 自动重启该容器。</li><li>OnFailure ： 当容器终止运行且退出码不为 0 时，由 kubelet 自动重启该容器。</li><li>Never ：不论容器运行状态如何， kubelet 都不会重启该容器。</li></ul></blockquote><p>RestartPolicy 和 Pod 里容器的状态对应关系:</p><ol><li>只要 Pod 的 restartPolicy 指定的策略是Always，那么这个Pod 就会保持 Running 状态，并进行容器重启。</li><li>对于包含多个容器的 Pod，只有它里面所有的容器都进入异常状态后，Pod 才会进入 Failed 状态。</li></ol><p>kubelet 重启失效容器的时间间隔以 sync-frequency 乘以 2n 来计算；例如 1、 2 、 4 、 8 倍等，最长延时 5min ，并且在成功重启后的 10min 后重置该时间。</p><p>Pod 的 重启策略与控制方式息息相关，当前可用于管理 Pod 的控制器包括RC 、 Job 、 DaemonSet 及直接通过 kubelet 管理（静态 Pod ） 。 每种控制器对 Pod的重启策略要求如下：</p><ul><li><p>RC 和 DaemonSet ：必须设置为 Always ，需要保证该容器持续运行。</p></li><li><p>Job: OnFailure 或 Never ，确保容器执行完成后不再重启。</p></li><li><p>kubelet : 在 Pod 失效时自动重启它，不论将 RestartPolicy 设置为什么值，也不会对 Pod进行健康检查。</p></li></ul><p>结合 Pod 的状态和重启策略，下表列出一些常见的状态转换场景。</p><table><thead><tr><th>Pod包含容器数</th><th>Pod当前状态</th><th>发生事件</th><th>Always</th><th>OnFailure</th><th>Never</th></tr></thead><tbody><tr><td>包含一个容器</td><td>Running</td><td>容器成功退出</td><td>Running</td><td>Successed</td><td>Successed</td></tr><tr><td>包含一个容器</td><td>Running</td><td>容器失败退出</td><td>Running</td><td>Running</td><td>Failed</td></tr><tr><td>包含两个容器</td><td>Running</td><td>1个容器失败退出</td><td>Running</td><td>Running</td><td>Running</td></tr><tr><td>包含两个容器</td><td>Running</td><td>容器被OOM杀掉</td><td>Running</td><td>Running</td><td>Failed</td></tr></tbody></table><p>Kubernetes 为我们提供了两种钩子函数：</p><blockquote><p><strong>PostStart</strong>：这个钩子在容器创建后立即执行。但是，并不能保证钩子将在容器ENTRYPOINT之前运行，因为没有参数传递给处理程序。主要用于资源部署、环境准备等。不过需要注意的是如果钩子花费太长时间以至于不能运行或者挂起， 容器将不能达到running状态。</p><p><strong>PreStop</strong>：这个钩子在容器终止之前立即被调用。它是阻塞的，意味着它是同步的， 所以它必须在删除容器的调用发出之前完成。主要用于优雅关闭应用程序、通知其他系统等。如果钩子在执行期间挂起， Pod阶段将停留在running状态并且永不会达到failed状态。</p></blockquote><h3 id="_4-init-container" tabindex="-1"><a class="header-anchor" href="#_4-init-container" aria-hidden="true">#</a> 4 init container</h3><p>在很多应用场景中，应用在启动之前都需要进行如下初始化操作，如：</p><ul><li>等待其他关联组件正确运行（例如数据库或某个后台服务〉。</li><li>基于环境变量或配置模板生成配置文件。</li><li>从远程数据库获取本地所需配置，或者将自身注册到某个中央数据库中。</li><li>下载相关依赖包 ， 或者对系统进行一些预配置操作。</li></ul><p>Kubernetes v1.3 引入了 一个 Alpha 版本的新特性 init container （在 Kubemetes v1.5 时被更新为 Beta 版本），用于在启动应用容器（ app container ）之前启动一个或多个“初始化 ”容器，完成应用容器所需的预置条件，如图 所示。 <strong>Init container 与应用容器本质上是一样的 ，但它们是仅运行一次就结束的任务，并且必须在成功执行完成后，系统才能继续执行下一个容器</strong>。根据 Pod 的重启策略（ Res tartPolicy ），当 init container 执行失败，在设置了 RestartPolicy=Never时， Pod 将会启动失败： 而设置 RestartPolicy=Always 时， Pod 将会被系统自动重启。</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1
<span class="token key atrule">kind</span><span class="token punctuation">:</span> Pod
<span class="token key atrule">metadata</span><span class="token punctuation">:</span>
  <span class="token key atrule">name</span><span class="token punctuation">:</span> javaweb
<span class="token key atrule">spec</span><span class="token punctuation">:</span>
  <span class="token key atrule">initContainers</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token key atrule">image</span><span class="token punctuation">:</span> registry.cn<span class="token punctuation">-</span>shenzhen.aliyuncs.com/leedon/war<span class="token punctuation">-</span>liuyanban
    <span class="token key atrule">name</span><span class="token punctuation">:</span> war
    <span class="token key atrule">command</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&quot;cp&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;/liuyanban.war&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;/app&quot;</span><span class="token punctuation">]</span>
    <span class="token key atrule">volumeMounts</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> <span class="token key atrule">mountPath</span><span class="token punctuation">:</span> /app
      <span class="token key atrule">name</span><span class="token punctuation">:</span> app<span class="token punctuation">-</span>volume
  <span class="token key atrule">containers</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token key atrule">image</span><span class="token punctuation">:</span> registry.cn<span class="token punctuation">-</span>shenzhen.aliyuncs.com/leedon/tomcat7
    <span class="token key atrule">name</span><span class="token punctuation">:</span> tomcat
    <span class="token key atrule">volumeMounts</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> <span class="token key atrule">mountPath</span><span class="token punctuation">:</span> /opt/tomcat/webapps
      <span class="token key atrule">name</span><span class="token punctuation">:</span> app<span class="token punctuation">-</span>volume
    <span class="token key atrule">ports</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">8080</span>
      <span class="token key atrule">hostPort</span><span class="token punctuation">:</span> <span class="token number">8001</span> 
  <span class="token key atrule">volumes</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> app<span class="token punctuation">-</span>volume
    <span class="token key atrule">emptyDir</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-pod-的健康检查" tabindex="-1"><a class="header-anchor" href="#_5-pod-的健康检查" aria-hidden="true">#</a> <strong>5. Pod 的健康检查</strong></h3><p>在 Kubernetes 中，你可以为 Pod 里的容器定义一个健康检查<code>“探针”（Probe）</code>。 这样，kubelet 就会根据这个 Probe 的返回值决定这个容器的状态，而不是直接以容器进行是否运行（来自 Docker 返回的信息）作为依据。 这种机制，是生产环境中保证应用健康存活的重要手段。</p><p>对 Pod 的健康状态检查可以通过两类探针来检查： LivenessProbe 和 ReadinessProbe 。kubelet 定期执行这两种探针来诊断容器的健康状况 。</p><ul><li><strong>LivenessProbe</strong> ：用于判断容器是否存活（ running 状态），如果 LivenessProbe 探针探测到容器不健康，则 kubelet 将杀掉该容器，并根据容器的重启策略做相应的处理。如果一个容器不包含 LivenessProbe 探针，那么 kubelet 认为该容器的 LivenessProbe 探针返回的值永远是“ Success&quot;</li><li><strong>ReadinessProbe</strong>：用于判断容器是否启动完成（ ready 状态），可以接收请求。如果 ReadinessProbe 探针检测到失败，则 Pod 的状态将被修改。 系统将从Service 的 Endpoint 中删除包含该容器所在 Pod 的 Endpoint 。 这样就能保证客户端在访问 Service时 在访问 Service 时不会被转发到服务不可用的Pod实例上</li></ul><p>LivenessProbe 和 ReadinessProbe 均可配置以下三种实现方式</p><ul><li><p><strong>ExecAction</strong> ：在容器内部执行一个命令 ，如果该命令的返回码为 0 ，则表明容器健康 。 ​ 在下面的例子中，通过执行“ test -f /tmp/healthy ”命令来判断一个容器运行是否正常。而该Pod 运行之后，在创建/tmp/healthy 文件的 30s 之后将删除该文件，而 LivenessProbe 健康检查的初始探测时间（ initialDelaySeconds ）为 15s ，探测结果将是 Fail ，将导致 kubelet 杀掉该容器井重启它。</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">livenessProbe</span><span class="token punctuation">:</span>
      <span class="token key atrule">exec</span><span class="token punctuation">:</span>
        <span class="token key atrule">command</span><span class="token punctuation">:</span>                    <span class="token comment"># 执行LivenessProbe的命令,返回值为0,则说明容器是健康的</span>
        <span class="token punctuation">-</span> test
        <span class="token punctuation">-</span> <span class="token punctuation">-</span>f
        <span class="token punctuation">-</span> /tmp/healthy
      <span class="token key atrule">initialDelaySeconds</span><span class="token punctuation">:</span> <span class="token number">15</span>       <span class="token comment"># 容器启动 15s后开始执行</span>
      <span class="token key atrule">periodSeconds</span><span class="token punctuation">:</span> <span class="token number">5</span>              <span class="token comment"># 每 5s执行一次</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>TCPSocketAction</strong> ：通过容器的 IP 地址和端口号执行 TCP 检查，如果能够建立 TCP 连接，则表明容器健康。</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">livenessProbe</span><span class="token punctuation">:</span>
      <span class="token key atrule">tcpSocket</span><span class="token punctuation">:</span>
        <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">80</span>
      <span class="token key atrule">initialDelaySeconds</span><span class="token punctuation">:</span> <span class="token number">30</span>
      <span class="token key atrule">timeoutSeconds</span><span class="token punctuation">:</span> <span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>HTTPGetAction</strong> ： 通过容器的 IP 地址、端口号及路径调用 HTTP Get 方法，如果响应的状态码大于等于 200 且小于 400，则认为容器状态健康。在下面的例子中， kubelet 定时发送 HTTP 请求到 localhost:80/_status/healthz 来进行容器应用的健康检查。</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">livenessProbe</span><span class="token punctuation">:</span>
        <span class="token key atrule">httpGet</span><span class="token punctuation">:</span>
          <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">80</span>
          <span class="token key atrule">path</span><span class="token punctuation">:</span> /_status/health 
        <span class="token key atrule">initialDelaySeconds</span><span class="token punctuation">:</span> <span class="token number">30</span>
        <span class="token key atrule">periodSeconds</span><span class="token punctuation">:</span> <span class="token number">3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="_6-pod-调度" tabindex="-1"><a class="header-anchor" href="#_6-pod-调度" aria-hidden="true">#</a> 6. Pod 调度</h3><h4 id="_1-调度原理" tabindex="-1"><a class="header-anchor" href="#_1-调度原理" aria-hidden="true">#</a> 1. 调度原理</h4><p>在 Kubernetes 中， Pod 在大部分场景下只是容器的载体，通常需要通过Deployment、RC、Job 等对象来完成一组 Pod 的调度与自动控制功能。 ​最早的Kubernetes 版本里并没有那么多 Pod 副本控制器，只有一个 Pod 副本控制器 RC ，这个控制器时这样设计实现的：</p><p>RC 独立于所控制的 Pod ，并通过 Label 标签 这个松耦合关联关系 控制目标 Pod 实例的创建和销毁。</p><p>随后 RC 出现的新的继承者——Deployment 。用于更加自动的完成 Pod 副本的部署、版本更新、回滚等功能。</p><p>严谨来说， RC 的继任者其实并不是 Deployment， 而是 ReplicaSet，因为 <strong>ReplicaSet 进一步增强了RC 标签选择器的灵活性</strong>。</p><p><strong>控制器自动调度：</strong></p><ul><li>Deployment或RC —— 全自动调度，后面详细介绍</li><li>DaemonSet —— 在每个Node上调度，后面详细介绍</li></ul><p><strong>手动调度：</strong></p><ul><li>NodeName —— 定向调度，最简单的节点选择方式，直接指定节点，跳过调度器。</li><li>NodeSelector —— 定向调度，早期的简单控制方式，直接通过键—值对将 Pod 调度到具有特定 label 的 Node 上。</li><li>Taint/Toleration —— 污点和容忍，通过 Pod 有洁癖的特性进行调度</li><li>NodeAffinity —— Node亲和性调度，NodeSelector 的升级版，支持更丰富的配置规则，使用更灵活。</li><li>PodAffinity —— Pod亲和性调度，根据已在节点上运行的 Pod 标签来约束当前 Pod 可以调度到哪些节点，而不是根据 node label</li></ul><h5 id="nodename" tabindex="-1"><a class="header-anchor" href="#nodename" aria-hidden="true">#</a> NodeName</h5><p>nodeName 是 PodSpec 的一个字段，用于直接指定调度节点，并运行该 pod。调度器在工作时，实际选择的是 nodeName 为空的 pod 并进行调度然后再回填该 nodeName，所以直接指定 nodeName 实际是直接跳过了调度器。</p><h5 id="nodeselector" tabindex="-1"><a class="header-anchor" href="#nodeselector" aria-hidden="true">#</a> NodeSelector</h5><p>Kubernetes Master 上的 Scheduler 服务负责实现 Pod 的调度，整个调度过程通过执行一系列复杂的算法，最终为每个 Pod 计算出一个最佳的目标节点，这一过程是自动完成的，通常我们无法知道 Pod 最终会被调度到哪个节点上。</p><p>在实际情况中，也可能需要将 Pod 调度到指定的一些 Node 上，可以通过 Node 的标签（ Label) 和 Pod 的 nodeSelector 属性相匹配，来达到上述目的。</p><ol><li><strong>通过 kubectl label 命令给目标 Node 打上一些标签</strong></li></ol><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code> kubectl label nodes k8s-node-1 zone=north
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2"><li><strong>在 Pod 的定义中加上 nodeSelector 的设置</strong></li></ol><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token comment"># 以 redis-master-controIler. yaml </span>
<span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> apps/v1
<span class="token key atrule">kind</span><span class="token punctuation">:</span> Deployment
<span class="token key atrule">metadata</span><span class="token punctuation">:</span>
  <span class="token key atrule">name</span><span class="token punctuation">:</span> redis<span class="token punctuation">-</span>master
  <span class="token key atrule">labels</span><span class="token punctuation">:</span>
    <span class="token key atrule">name</span><span class="token punctuation">:</span> redis<span class="token punctuation">-</span>master
<span class="token key atrule">spec</span><span class="token punctuation">:</span>
  <span class="token key atrule">replicas</span><span class="token punctuation">:</span> <span class="token number">1</span>
  <span class="token key atrule">selector</span><span class="token punctuation">:</span>
    <span class="token key atrule">matchLabels</span><span class="token punctuation">:</span>
      <span class="token key atrule">name</span><span class="token punctuation">:</span> redis<span class="token punctuation">-</span>master
  <span class="token key atrule">template</span><span class="token punctuation">:</span>
    <span class="token key atrule">metadata</span><span class="token punctuation">:</span>
      <span class="token key atrule">labels</span><span class="token punctuation">:</span>
        <span class="token key atrule">name</span><span class="token punctuation">:</span> redis<span class="token punctuation">-</span>master
    <span class="token key atrule">spec</span><span class="token punctuation">:</span>
      <span class="token key atrule">containers</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> master
        <span class="token key atrule">image</span><span class="token punctuation">:</span> daocloud.io/library/redis
        <span class="token key atrule">ports</span><span class="token punctuation">:</span>
        <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">80</span>
      <span class="token key atrule">nodeSelector</span><span class="token punctuation">:</span>
        <span class="token key atrule">zone</span><span class="token punctuation">:</span> north
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="taint-toleration" tabindex="-1"><a class="header-anchor" href="#taint-toleration" aria-hidden="true">#</a> Taint/Toleration</h5><p>默认情况下 Master 节点是不允许运行用户 Pod 的，原因在于 Taint/Toleration 机制： 一旦某个节点被加上了一个 Taint，即被上了“污点”，那么所有 Pod 就都不能在这个节点上运行，因为 Pod 有&quot;洁癖&quot;。</p><p><strong>Taint</strong> 查看master的Taint:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>kubectl describe node master
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>为node节点打Taints</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>kubectl taint nodes NODE_NAME  KEY=VALUE:EFFECT
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="nodeaffinity" tabindex="-1"><a class="header-anchor" href="#nodeaffinity" aria-hidden="true">#</a> NodeAffinity</h5><p>NodeAffinity 意为 Node 亲和性的调度策略，是用于替换 NodeSelector 的全新调度策略 。 Node affinity跟NodeSelector很像, 相对于NodeSelector主要有以下几个优点：</p><ul><li>匹配有更多的逻辑组合，不只是字符串的完全相等</li><li>调度分成软策略(soft)和硬策略(hard)，在软策略下，如果没有满足调度条件的节点，pod会忽略这条规则，继续完成调度。</li></ul><p><strong>nodeAffinity 属性：</strong><code>requiredDuringSchedulingIgnoredDuringExecution:</code> 调度时必须满足, 运行时如果节点标签不再满足指定的条件,pod仍继续运行</p><p><code>preferredDuringSchedulingIgnoredDuringExecution:</code> 优选条件,如果没有满足条件的节点,就忽略这些条件</p><p>NodeAffinity 规则设置的注意事项如下。</p><ul><li>如果同时定义了 nodeSelector 和 nodeAffinity ，那么必须两个条件都得到满足， Pod 才能最终运行在指定的 Node 上。</li><li>如果 nodeSelectorTerms 中有多个 matchExpressions ， 那么只需要其中一个能够匹配成功即可 。</li><li>如果 matchExpressions 中有多个 key ， 则一个节点必须满足所有 key 才能运行该 Pod 。</li></ul><p>硬策略适用于 pod 必须运行在某种节点，否则会出现问题的情况，比如集群中节点的架构不同，而运行的服务必须依赖某种架构提供的功能；</p><p>软策略适用于满不满足条件都能工作，但是满足条件更好的情况，比如服务最好运行在某个区域，减少网络传输等。</p><p>这种区分是按用户的具体需求决定的，并没有绝对的技术依赖。</p><h5 id="podaffinity" tabindex="-1"><a class="header-anchor" href="#podaffinity" aria-hidden="true">#</a> PodAffinity</h5><p>nodeSelector &amp; nodeAffinity 都是基于 node label 进行调度。 有时候我们希望调度的时候能考虑 pod 之间的关系，而不只是 pod 和 node 的关系。</p><p><strong>PodAffinity 会基于节点上已经运行的 pod label 来约束新 pod 的调度</strong>。 其规则就是“如果 X 已经运行了一个或者多个符合规则 Y 的 Pod，那么这个 Pod 应该（如果是反亲和性，则是不应该）调度到 X 上”。</p><p>这里提到的 X 是指一个拓扑域, 类似于 <code>node、rack、zone、cloud region</code> 等等，是指 <code>k8s 内置 Node</code> 标签 ，当然也可以自定义。</p><p><strong>PodAffinity 属性:</strong></p><blockquote><ul><li>podAffinity: 亲和性, 将 Pod 调度到有运行着的满足条件的 Pod 所在的 拓扑域</li><li>podAntiAffinity: 反亲和性, 不要将 Pod 调度到有运行着的满足条件的 Pod 所在的 拓扑域</li><li>requiredDuringSchedulingIgnoredDuringExecution: 功能类似于 nodeAffinity</li><li>preferredDuringSchedulingIgnoredDuringExecution: 功能类似于 nodeAffinity</li></ul></blockquote><p>PodAffinity 规则设置的注意事项如下 。</p><ul><li>除了设置 Label Selector 和 topologyKey ，用户还可 以指定 namespace 列表来进行限制，同样，使用 Label Selector 对 namespace 进行选择。 namespace 的定义和 Label Selector 及 topologyKey 同级。省略 namespace 的设置，表示使用定义了 affnity/anti-affinity 的Pod 所在的 namespace 。如果 namespace 设置为空值，则表示所有 namespace 。</li><li>在所有关联 requiredDuringSchedulinglgnoredDuringExecution 的 matchExpressions 全都满足之后，系统才能将 Pod 调度到某个 Node 上。</li></ul><h4 id="_2-pod调度过程" tabindex="-1"><a class="header-anchor" href="#_2-pod调度过程" aria-hidden="true">#</a> 2. Pod调度过程</h4><div class="language-mermaid line-numbers-mode" data-ext="mermaid"><pre class="language-mermaid"><code><span class="token keyword">sequenceDiagram</span>
    用户<span class="token arrow operator">-&gt;&gt;</span>kubeConfig<span class="token operator">:</span> 创建Pod
    kubeConfig <span class="token arrow operator">-&gt;&gt;</span> apiServer<span class="token operator">:</span> 提交Pod
    apiServer <span class="token arrow operator">-&gt;&gt;</span> etcd<span class="token operator">:</span> 处理用户请求，存储Pod数据到etcd
    scheduler <span class="token arrow operator">--&gt;&gt;</span> apiServer<span class="token operator">:</span> 周期性获取Node和Pod信息
    scheduler <span class="token arrow operator">-&gt;&gt;</span> scheduler<span class="token operator">:</span> 为Pod选择主机
    scheduler <span class="token arrow operator">-&gt;&gt;</span>  apiServer<span class="token operator">:</span> 调度器尝试为Pod的Node绑定
    apiServer <span class="token arrow operator">-&gt;&gt;</span> etcd<span class="token operator">:</span> 将Pod的绑定Node信息存储到etcd
    kubelet <span class="token arrow operator">--&gt;&gt;</span> etcd<span class="token operator">:</span> 定期获取Pod的Node绑定信息
    kubelet <span class="token arrow operator">-&gt;&gt;</span> docker<span class="token operator">:</span> 创建/启动容器
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,91),p=[l];function o(i,c){return s(),a("div",null,p)}const r=n(t,[["render",o],["__file","k8s-06-Pod原理和详解.html.vue"]]);export{r as default};
