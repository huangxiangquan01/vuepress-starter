import{_ as n,o as s,c as a,a as e}from"./app-999de8cb.js";const t={},p=e(`<h1 id="jvm内存模型" tabindex="-1"><a class="header-anchor" href="#jvm内存模型" aria-hidden="true">#</a> JVM内存模型</h1><h2 id="java语言的跨平台特性" tabindex="-1"><a class="header-anchor" href="#java语言的跨平台特性" aria-hidden="true">#</a> Java语言的跨平台特性</h2><p><img src="https://xqhuang.oss-cn-beijing.aliyuncs.com/study/java跨平台特性.png?versionId=CAEQERiBgMC3wLDw0xciIDY1ZjllYjg5NDRhOTRkMzA4NDI3ZDEwMDM2MDMxYTM5" alt="跨平台特性"></p><h2 id="jvm整体结构及内存模型" tabindex="-1"><a class="header-anchor" href="#jvm整体结构及内存模型" aria-hidden="true">#</a> JVM整体结构及内存模型</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Math</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> initData <span class="token operator">=</span> <span class="token number">666</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Math</span> math <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Math</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        math<span class="token punctuation">.</span><span class="token function">compute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> c<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://xqhuang.oss-cn-beijing.aliyuncs.com/study/JVM内存模型.png?versionId=CAEQERiBgICGwbDw0xciIGM0MGJhYTcxN2I3YTRkYzY4MmNjY2JmNDhkMGMzNjRj" alt="内存模型"></p><h2 id="jvm内存参数设置" tabindex="-1"><a class="header-anchor" href="#jvm内存参数设置" aria-hidden="true">#</a> JVM内存参数设置</h2><p><img src="https://xqhuang.oss-cn-beijing.aliyuncs.com/study/JVM内存参数设置.png?versionId=CAEQERiBgICvwLDw0xciIGU3MDUzNTY5MDQ4NjRlMGU5OGY4OGFmMDQxZWEyYmZk" alt="内存参数设置"></p><ul><li>-Xss：每个线程的栈大小</li><li>-Xms：初始堆大小，默认物理内存的1/64</li><li>-Xmx：最大堆大小，默认物理内存的1/4</li><li>-Xmn：新生代大小</li><li>-XX:NewSize：设置新生代初始大小</li><li>-XX:NewRatio：默认2表示新生代占年老代的1/2，占整个堆内存的1/3。</li><li>-XX:SurvivorRatio：默认8表示一个survivor区占用1/8的Eden内存，即1/10的新生代内存。</li><li>-XX：MaxMetaspaceSize： 设置元空间最大值， 默认是-1， 即不限制， 或者说只受限于本地内存大小。</li><li>-XX：MetaspaceSize： 指定元空间触发Fullgc的初始阈值(元空间无固定初始大小)， 以字节为单位，默认是21M左右，达到该值就会触发full gc进行类型卸载， 同时收集器会对该值进行调整： 如果释放了大量的空间， 就适当降低该值； 如果释放了很少的空间， 那么在不超过-XX：MaxMetaspaceSize（如果设置了的话） 的情况下， 适当提高该值。这个跟早期jdk版本的-XX:PermSize参数意思不一样，</li><li>-XX:PermSize代表永久代的初始容量。由于调整元空间的大小需要Full GC，这是非常昂贵的操作，如果应用在启动的时候发生大量Full GC，通常都是由于永久代或元空间发生了大小调整，基于这种情况，一般建议在JVM参数中将MetaspaceSize和MaxMetaspaceSize设置成一样的值，并设置得比初始值要大，对于8G物理内存的机器来说，一般我会将这两个值都设置为256M。</li></ul>`,9),c=[p];function i(o,l){return s(),a("div",null,c)}const r=n(t,[["render",i],["__file","JVM内存模型.html.vue"]]);export{r as default};
