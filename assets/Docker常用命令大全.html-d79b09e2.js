import{_ as e,o as a,c as n,a as s}from"./app-999de8cb.js";const d={},i=s(`<h1 id="docker" tabindex="-1"><a class="header-anchor" href="#docker" aria-hidden="true">#</a> Docker</h1><p>Docker 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的镜像中，然后发布到任何流行的 Linux或Windows 机器上，也可以实现虚拟化。随着容器化部署已变成趋势，熟练掌握Docker的命令已经变得更加重要了。本文介绍了如何安装Docker，对Docker的常用镜像、容器和网络操作命令和Dockerfile进行了总结并提供了一些示例。</p><h2 id="docker的安装" tabindex="-1"><a class="header-anchor" href="#docker的安装" aria-hidden="true">#</a> Docker的安装</h2><h2 id="docker镜像操作" tabindex="-1"><a class="header-anchor" href="#docker镜像操作" aria-hidden="true">#</a> Docker镜像操作</h2><h3 id="搜索镜像" tabindex="-1"><a class="header-anchor" href="#搜索镜像" aria-hidden="true">#</a> 搜索镜像</h3><blockquote><p>docker search + 镜像名字</p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> search nginx
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>OPTIONS说明：</p><ul><li>–-limit : 只列出N个镜像，默认25个</li></ul><h3 id="拉取镜像" tabindex="-1"><a class="header-anchor" href="#拉取镜像" aria-hidden="true">#</a> 拉取镜像</h3><blockquote><p>从registry拉取镜像：docker pull + 镜像名字:版本号</p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> pull nginx:latest
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="推送镜像" tabindex="-1"><a class="header-anchor" href="#推送镜像" aria-hidden="true">#</a> 推送镜像</h3><blockquote><p>docker push + 仓库名:标签</p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> push repro1:v1.0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="查看本地镜像" tabindex="-1"><a class="header-anchor" href="#查看本地镜像" aria-hidden="true">#</a> 查看本地镜像</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> images
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="构建镜像" tabindex="-1"><a class="header-anchor" href="#构建镜像" aria-hidden="true">#</a> 构建镜像</h3><blockquote><p>使用Dockerfile创建镜像: docker build + 目录，.代表当前目录，-t表示加标签</p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> build <span class="token parameter variable">-t</span> mynginx:1.0 <span class="token builtin class-name">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="删除镜像" tabindex="-1"><a class="header-anchor" href="#删除镜像" aria-hidden="true">#</a> 删除镜像</h3><blockquote><p>删除一个或多个镜像: docker rmi + 镜像1 + 镜像2</p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> rmi mynginx:1.0 mynginx:2.0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="删除未使用过的镜像" tabindex="-1"><a class="header-anchor" href="#删除未使用过的镜像" aria-hidden="true">#</a> 删除未使用过的镜像</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> image prune <span class="token parameter variable">-a</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="给镜像加标记" tabindex="-1"><a class="header-anchor" href="#给镜像加标记" aria-hidden="true">#</a> 给镜像加标记</h3><blockquote><p>给镜像加标记： docker tag 镜像标签 新镜像标签名</p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> tag mynginx:1.0 nginx1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="镜像保存" tabindex="-1"><a class="header-anchor" href="#镜像保存" aria-hidden="true">#</a> 镜像保存</h3><blockquote><p>把镜像保存为.tar文件: docker save 镜像 &gt; 文件</p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> save mynginx:1.0 <span class="token operator">&gt;</span> mynginx_v1.tar
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="载入镜像" tabindex="-1"><a class="header-anchor" href="#载入镜像" aria-hidden="true">#</a> 载入镜像</h3><blockquote><p>从.tar文件载入镜像: docker load -i .tar文件</p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> load <span class="token parameter variable">-i</span> mynginx_v1.tar
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="根据容器创建镜像" tabindex="-1"><a class="header-anchor" href="#根据容器创建镜像" aria-hidden="true">#</a> 根据容器创建镜像</h3><blockquote><p>根据容器创建镜像：docker commit 容器名 镜像名</p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> commit
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="docker容器操作" tabindex="-1"><a class="header-anchor" href="#docker容器操作" aria-hidden="true">#</a> Docker容器操作</h2><h3 id="创建容器" tabindex="-1"><a class="header-anchor" href="#创建容器" aria-hidden="true">#</a> 创建容器</h3><blockquote><p>创建容器: docker create + 选项(-i, -t, -d, -p, -v, -e) + 镜像</p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code> <span class="token function">docker</span> create <span class="token parameter variable">--name</span> mynginx_1 <span class="token parameter variable">-it</span> <span class="token parameter variable">-p</span> <span class="token number">8080</span>:80 mynginx:1.0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>OPTIONS说明：</p><ul><li>-i:以交互模式运行容器，通常与-t 同时使用；</li><li>-d:后台运行容器，并返回容器ID；</li><li>-p:端口隐射, 宿主机在前，容器在后</li><li>-P:随机映射宿主机端口</li><li>-t:为容器重新分配一个伪输入终端，通常与-i 同时使用；</li><li>-v:目录挂载</li><li>--entrypoint: 指定进入点</li><li>--restart=always: 服务重启</li></ul><h3 id="启动容器" tabindex="-1"><a class="header-anchor" href="#启动容器" aria-hidden="true">#</a> 启动容器</h3><blockquote><p>启动容器：docker start + 容器名</p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> start mynginx_1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="运行容器" tabindex="-1"><a class="header-anchor" href="#运行容器" aria-hidden="true">#</a> 运行容器</h3><blockquote><p>创建 + 运行容器: docker run + 选项 + 镜像 + 命令</p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">--name</span> mynginx_1 <span class="token parameter variable">-it</span> <span class="token parameter variable">-p</span> <span class="token number">8080</span>:80 mynginx:1.0
<span class="token function">docker</span> run <span class="token parameter variable">-it</span> ubuntu /bin/bash
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="查看正在运行中的容器" tabindex="-1"><a class="header-anchor" href="#查看正在运行中的容器" aria-hidden="true">#</a> 查看正在运行中的容器</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token function">ps</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="查看所有容器" tabindex="-1"><a class="header-anchor" href="#查看所有容器" aria-hidden="true">#</a> 查看所有容器</h3><blockquote><p>查看所有容器，包括停止运行的容器: docker ps -a</p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token function">ps</span> <span class="token parameter variable">-a</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="停止容器" tabindex="-1"><a class="header-anchor" href="#停止容器" aria-hidden="true">#</a> 停止容器</h3><blockquote><p>停止一个正在运行的容器: docker stop 容器</p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> stop mynginx_1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="重启容器" tabindex="-1"><a class="header-anchor" href="#重启容器" aria-hidden="true">#</a> 重启容器</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> restart mynginx_1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="容器重命名" tabindex="-1"><a class="header-anchor" href="#容器重命名" aria-hidden="true">#</a> 容器重命名</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token function">rename</span> mynginx_1 mynginx_2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="删除容器" tabindex="-1"><a class="header-anchor" href="#删除容器" aria-hidden="true">#</a> 删除容器</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token function">rm</span> mynginx_1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="强制删除容器" tabindex="-1"><a class="header-anchor" href="#强制删除容器" aria-hidden="true">#</a> 强制删除容器</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token function">rm</span> <span class="token parameter variable">-f</span> mynginx_1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="删除已停止运行的所有容器" tabindex="-1"><a class="header-anchor" href="#删除已停止运行的所有容器" aria-hidden="true">#</a> 删除已停止运行的所有容器</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> container prune
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="拷贝文件到主机" tabindex="-1"><a class="header-anchor" href="#拷贝文件到主机" aria-hidden="true">#</a> 拷贝文件到主机</h3><blockquote><p>拷贝文件，从容器到宿主机：docker cp 容器名:容器内路径 宿主机文件路径</p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token function">cp</span> myweb_1:/index.html index.html
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="拷贝文件到容器" tabindex="-1"><a class="header-anchor" href="#拷贝文件到容器" aria-hidden="true">#</a> 拷贝文件到容器</h3><blockquote><p>拷贝文件，从宿主机到容器：docker cp 宿主机文件路径 容器名:容器内路径</p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token function">cp</span> index.html myweb_1:/index.html 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="进入运行容器" tabindex="-1"><a class="header-anchor" href="#进入运行容器" aria-hidden="true">#</a> 进入运行容器</h3><blockquote><p>进入运行的容器，执行命令: docker exec + 选项 + 容器名 + 命令 + 参数 推荐大家使用 docker exec命令，使用此命令即使exit容器终端，也不会导致容器的停止</p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> mynginx_1 /bin/bash
<span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> mynginx_1 /bin/bash start.sh
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="查看容器端口映射" tabindex="-1"><a class="header-anchor" href="#查看容器端口映射" aria-hidden="true">#</a> 查看容器端口映射</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> port mynginx_1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="查看容器内已修改文件" tabindex="-1"><a class="header-anchor" href="#查看容器内已修改文件" aria-hidden="true">#</a> 查看容器内已修改文件</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token function">diff</span> mynginx_1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="查看容器日志" tabindex="-1"><a class="header-anchor" href="#查看容器日志" aria-hidden="true">#</a> 查看容器日志</h3><blockquote><p>查看容器日志：docker logs + 容器名</p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> logs web
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="查看容器内运行进程" tabindex="-1"><a class="header-anchor" href="#查看容器内运行进程" aria-hidden="true">#</a> 查看容器内运行进程</h3><blockquote><p>查看容器内运行进程：docker top + 容器名</p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token function">top</span> web
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="查看容器的底层信息" tabindex="-1"><a class="header-anchor" href="#查看容器的底层信息" aria-hidden="true">#</a> 查看容器的底层信息</h3><blockquote><p>查看容器的底层信息：docker inspect + 容器名</p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> inspect web
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="利用inspect命令查看容器的ip地址" tabindex="-1"><a class="header-anchor" href="#利用inspect命令查看容器的ip地址" aria-hidden="true">#</a> 利用inspect命令查看容器的IP地址</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> inspect web <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">&quot;IPAddress&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="查看运行容器的统计数据" tabindex="-1"><a class="header-anchor" href="#查看运行容器的统计数据" aria-hidden="true">#</a> 查看运行容器的统计数据</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> stats
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="dockerfile详解" tabindex="-1"><a class="header-anchor" href="#dockerfile详解" aria-hidden="true">#</a> Dockerfile详解</h2><p>使用<code>$ docker build</code>命令构建镜像时需要用到Dockerfile，它通常会包含如下命令：</p><table><thead><tr><th>命令</th><th>描述</th><th>示例</th></tr></thead><tbody><tr><td>FROM</td><td>指定基础镜像</td><td>FROM python:3.8.3-alpine</td></tr><tr><td>MAINTAINER</td><td>镜像创建者</td><td>MAINTAINER huangxq</td></tr><tr><td>COPY</td><td>添加宿主机文件到容器，复制</td><td>COPY . /html/myapp</td></tr><tr><td>ADD</td><td>添加宿主机文件到容器，复制+解压</td><td>ADD myfile.tar /html/myapp</td></tr><tr><td>RUN</td><td>创建镜像时要执行的命令</td><td>RUN pip install -r requirements.txt</td></tr><tr><td>USER</td><td>切换执行后续命令的用户和用户组, 但这个用户必需首先已使用RUN的命令进行创建好了。</td><td>RUN groupadd -r redis &amp;&amp; useradd -r -g redis redis; USER redis(切换用户)</td></tr><tr><td>WORKDIR</td><td>指定工作目录</td><td>WORKDIR /html/myapp</td></tr><tr><td>CMD</td><td>容器启动时默认要运行的程序。如果执行 docker run 后面跟启动命令会被覆盖掉。</td><td>CMD [“/bin/bash”]</td></tr><tr><td>ENV</td><td>设置环境变量</td><td>ENV APP_HOME /html/myapp</td></tr><tr><td>ENTRYPOINT</td><td>同CMD，但其不会被覆盖，可以和docker run命令传递的参数进行拼接执行。</td><td>如果设置：ENTRYPOINT [“nginx”, “-c”] ， 运行<code>$ docker run mynginx_1 -c /etc/nginx/myweb.conf</code>将默认执行命令：<code>nginx -c /etc/nginx/myweb.conf</code>。</td></tr><tr><td>VOLUME</td><td>定义匿名数据卷。在启动容器时忘记挂载数据卷，会自动挂载到匿名卷。</td><td>VOLUME /tmp</td></tr><tr><td>EXPOSE</td><td>容器暴露端口，供link到当前容器或通过docker network的容器，不会和宿主机端口映射关系。</td><td>EXPOSE 8080</td></tr></tbody></table><h2 id="docker网络操作" tabindex="-1"><a class="header-anchor" href="#docker网络操作" aria-hidden="true">#</a> Docker网络操作</h2><p>Docker network 是主要是用做容器之间的通信，即组建容器之间的局域网，然后加入这个网络的容器可以使用别名(network-alias, 比如web, db)或者IP地址进行通信，就如同局域网中主机之间的相互访问。</p><p><strong>备注</strong>：使用<code>-link</code> 也可以实现容器之间简单的网络，但是容器较多而且通信关系较为复杂时，使用network就更有条理。除此以外，官方也已经很早不建议使用<code>-link</code>方式进行容器互联，-link未来可能会被删除。</p><h3 id="网络驱动程序" tabindex="-1"><a class="header-anchor" href="#网络驱动程序" aria-hidden="true">#</a> 网络驱动程序</h3><p>Docker 的网络驱动程序默认情况下有四个：<code>bridge</code>、<code>host</code>、<code>overlay </code>和 <code>macvlan</code>，还有一个特殊的网络驱动 none 用于禁止容器访问网络。</p><ul><li><code>bridge</code>：默认的网络驱动程序。如果在创建的时候没有指定网络驱动，则默认使用 bridge，也就是桥接网络。跟虚拟机的网络地址转换差不多，通过一个内部的子网向容器提供 IP 和网络。</li><li><code>host</code>：容器会直接与宿主系统共享 IP 地址和网络，但是其它（例如存储，进程命名空间和用户命名空间）相对宿主机隔离的。</li><li><code>overlay</code>：覆盖网络模式可以将不同的Dockerd守护进程连接在一起，该网络模式支持集群容器之间相互通信，以及集群和某个单机版独立容器直接相互通信。该网络模式使用场景比较广泛，通常集群部署时会使用该模式。</li><li><code>macvlan</code>：这个网络驱动有点像虚拟机的桥接模式，它可以让你的容器直接连接到你的物理网络，比如连接到你的路由器，让物理网络来提供 IP 地址和网络。</li><li><code>none</code>: 禁用容器所有网络。通常与自定义网络驱动程序一起使用。</li></ul><h3 id="创建一个network" tabindex="-1"><a class="header-anchor" href="#创建一个network" aria-hidden="true">#</a> 创建一个network</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># mysite1-network是局域网的名字，可以自定义。默认bridge模式。</span>
<span class="token function">docker</span> network create mysite1-network 

<span class="token comment"># 利用--driver或-d指定使用bridge驱动，创建mysite2-network网络</span>
<span class="token function">docker</span> network create –-driver bridge mysite2-network

<span class="token comment"># 查看已创建的network列表</span>
<span class="token function">docker</span> network <span class="token function">ls</span>  

<span class="token comment"># 查看网络详情</span>
<span class="token function">docker</span> network inspect mysite1-network
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="将容器连接到network" tabindex="-1"><a class="header-anchor" href="#将容器连接到network" aria-hidden="true">#</a> 将容器连接到network</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 运行新的容器，并加入到mysite1-network网络中</span>
<span class="token comment"># --network 表示这个容器要连接到的网络</span>
<span class="token comment"># --network-alias 表示这个容器在此网络中的名称，也可以使用--ip来指定容器的ip</span>
<span class="token function">docker</span> run <span class="token parameter variable">--name</span><span class="token operator">=</span>docker-web <span class="token parameter variable">-d</span> <span class="token parameter variable">--network</span><span class="token operator">=</span>mysite1-network --network-alias<span class="token operator">=</span>web docker-web-image

<span class="token comment"># 将已经在运行的容器加入网络使用以下命令, 容器名为docker-web，别名为web</span>
<span class="token function">docker</span> network connect <span class="token parameter variable">--alias</span><span class="token operator">=</span>web <span class="token parameter variable">--network</span><span class="token operator">=</span>mysite1-network docker-web

<span class="token comment"># 连接网络时为docker-web容器指定ip地址</span>
<span class="token function">docker</span> network connect <span class="token parameter variable">--ip</span><span class="token operator">=</span><span class="token number">192.10</span>.36.122 multi-host-network docker-web

<span class="token comment"># 断开docker-web容器与mysite1-network的连接</span>
<span class="token function">docker</span> network disconnet mysite1-network docker-web
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="删除network" tabindex="-1"><a class="header-anchor" href="#删除network" aria-hidden="true">#</a> 删除network</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 删除mysite1-network网络</span>
<span class="token function">docker</span> network <span class="token function">rm</span> mysite1-network
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="docker数据卷操作" tabindex="-1"><a class="header-anchor" href="#docker数据卷操作" aria-hidden="true">#</a> Docker数据卷操作</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 列出所有数据卷</span>
<span class="token function">docker</span> volume <span class="token function">ls</span>
<span class="token comment"># 使用过滤，列出所有未使用的数据卷</span>
<span class="token function">docker</span> volume <span class="token function">ls</span> <span class="token parameter variable">--filter</span> <span class="token assign-left variable">dangling</span><span class="token operator">=</span>true
<span class="token comment"># 删除一个数据卷</span>
<span class="token comment"># 容器正在使用的数据卷不能删除，绑定挂载的无法删除。</span>
<span class="token function">docker</span> volume <span class="token function">rm</span> <span class="token operator">&lt;</span>volume_name<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,110),r=[i];function c(t,l){return a(),n("div",null,r)}const p=e(d,[["render",c],["__file","Docker常用命令大全.html.vue"]]);export{p as default};
