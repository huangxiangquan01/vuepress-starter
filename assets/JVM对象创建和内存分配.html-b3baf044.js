import{_ as n,o as s,c as a,a as e}from"./app-999de8cb.js";const t={},i=e(`<h1 id="对象的创建" tabindex="-1"><a class="header-anchor" href="#对象的创建" aria-hidden="true">#</a> 对象的创建</h1><h2 id="_1-类加载检查" tabindex="-1"><a class="header-anchor" href="#_1-类加载检查" aria-hidden="true">#</a> 1. 类加载检查</h2><p>​ 虚拟机遇到一条new指令时，首先将去检查这个指令的参数是否能在常量池中定位到一个类的符号引用，并且检查这个符号引用代表的类是否已被加载、解析和初始化过。如果没有，那必须先执行相应的类加载过程。 new指令对应到语言层面上讲是，new关键词、对象克隆、对象序列化等。</p><h2 id="_2-分配内存" tabindex="-1"><a class="header-anchor" href="#_2-分配内存" aria-hidden="true">#</a> 2. 分配内存</h2><p>​ 在类加载检查通过后，接下来虚拟机将为新生对象分配内存。对象所需内存的大小在类 加载完成后便可完全确定，为对象分配空间的任务等同于把一块确定大小的内存从Java堆中划分出来。</p><blockquote><p>这个步骤有两个问题：</p></blockquote><ol><li>如何划分内存。</li><li>在并发情况下， 可能出现正在给对象A分配内存，指针还没来得及修改，对象B又同时使用了原来的指针来分配内存的情况。</li></ol><h3 id="划分内存的方法" tabindex="-1"><a class="header-anchor" href="#划分内存的方法" aria-hidden="true">#</a> 划分内存的方法</h3><ul><li><p>“指针碰撞”（Bump the Pointer）</p><blockquote><p>(默认用指针碰撞) 如果Java堆中内存是绝对规整的，所有用过的内存都放在一边，空闲的内存放在另一边，中间放着一个指针作为分界点 的指示器，那所分配内存就仅仅是把那个指针向空闲空间那边挪动一段与对象大小相等的距离。</p></blockquote></li><li><p>“空闲列表”（Free List）</p><blockquote><p>如果Java堆中的内存并不是规整的，已使用的内存和空 闲的内存相互交错，那就没有办法简单地进行指针碰撞了，虚拟 机就必须维护一个列表，记 录上哪些内存块是可用的，在分配的时候从列表中找到一块足够大的空间划分给对象实例， 并更新列表上的记录</p></blockquote></li></ul><h3 id="解决并发问题的方法" tabindex="-1"><a class="header-anchor" href="#解决并发问题的方法" aria-hidden="true">#</a> 解决并发问题的方法</h3><ul><li>CAS（compare and swap）</li></ul><blockquote><p>虚拟机采用CAS配上失败重试的方式保证更新操作的原子性来对分配内存空间的动作进行同步处理。</p></blockquote><ul><li>本地线程分配缓冲（Thread Local Allocation Buffer,TLAB）</li></ul><blockquote><p>把内存分配的动作按照线程划分在不同的空间之中进行，即每个线程在Java堆中预先分配一小块内存。通过­XX:+/­ UseTLAB参数来设定虚拟机是否使用TLAB(JVM会默认开启­XX:+UseTLAB)，­XX:TLABSize 指定TLAB大小。</p></blockquote><h2 id="_3-初始化" tabindex="-1"><a class="header-anchor" href="#_3-初始化" aria-hidden="true">#</a> 3.初始化</h2><p>内存分配完成后，虚拟机需要将分配到的内存空间都初始化为零值（不包括对象头）， 如果使用TLAB，这一工作过程也可以提前至TLAB分配时进行。这一步操作保证了对象的实例字段在Java代码中可以不赋初始值就直接使用，程序能访问到这些字段的数据类型所对应的零值。</p><h2 id="_4-设置对象头" tabindex="-1"><a class="header-anchor" href="#_4-设置对象头" aria-hidden="true">#</a> 4.设置对象头</h2><p>初始化零值之后，虚拟机要对对象进行必要的设置，例如这个对象是哪个类的实例、如何才能找到类的元数据信息、对象的哈希码、对象的GC分代年龄等信息。这些信息存放在对象的对象头Object Header之中。</p><blockquote><p>在HotSpot虚拟机中，对象在内存中存储的布局可以分为3块区域：对象头（Header）、 实例数据（Instance Data） 和对齐填充（Padding）。 HotSpot虚拟机的对象头包括两部分信息，第一部分用于存储对象自身的运行时数据， 如哈希码（HashCode）、GC分代年龄、锁状态标志、线程持有的锁、偏向线程ID、偏向时 间戳等。对象头的另外一部分 是类型指针，即对象指向它的类元数据的指针，虚拟机通过这个指针来确定这个对象是哪个类的实例。</p></blockquote><p><img src="https://xqhuang.oss-cn-beijing.aliyuncs.com/study/对象头.png?versionId=CAEQERiBgIDThuCu1BciIDE4N2FkN2E5NDg0MTRiNjc4ZTYyNjI1ZmE4YWQ0MTg0" alt="对象头"></p><h2 id="_5-执行init方法" tabindex="-1"><a class="header-anchor" href="#_5-执行init方法" aria-hidden="true">#</a> 5.执行init方法</h2><p>​ 执行init方法，即对象按照程序员的意愿进行初始化。对应到语言层面上讲，就是为属性赋值（注意，这与上面的赋 零值不同，这是由程序员赋的值），和执行构造方法。</p><h3 id="对象大小与指针压缩" tabindex="-1"><a class="header-anchor" href="#对象大小与指针压缩" aria-hidden="true">#</a> 对象大小与指针压缩</h3><p>对象大小可以用jol­core包查看，引入依赖</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&lt;dependency&gt; 
    &lt;groupId&gt;org.openjdk.jol&lt;/groupId&gt; 
    &lt;artifactId&gt;jol‐core&lt;/artifactId&gt;
    &lt;version&gt;0.9&lt;/version&gt; 
 &lt;/dependency&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/** 
 * 计算对象大小 
 */</span> 
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JOLSample</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span> 
         <span class="token class-name">ClassLayout</span> layout <span class="token operator">=</span> <span class="token class-name">ClassLayout</span><span class="token punctuation">.</span><span class="token function">parseInstance</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
         <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>layout<span class="token punctuation">.</span><span class="token function">toPrintable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
        
         <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
         <span class="token class-name">ClassLayout</span> layout1 <span class="token operator">=</span> <span class="token class-name">ClassLayout</span><span class="token punctuation">.</span><span class="token function">parseInstance</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
         <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>layout1<span class="token punctuation">.</span><span class="token function">toPrintable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
        
         <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
         <span class="token class-name">ClassLayout</span> layout2 <span class="token operator">=</span> <span class="token class-name">ClassLayout</span><span class="token punctuation">.</span><span class="token function">parseInstance</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
         <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>layout2<span class="token punctuation">.</span><span class="token function">toPrintable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token punctuation">}</span> 

    <span class="token comment">// ‐XX:+UseCompressedOops 默认开启的压缩所有指针  </span>
    <span class="token comment">// ‐XX:+UseCompressedClassPointers 默认开启的压缩对象头里的类型指针Klass Pointer  </span>
    <span class="token comment">// Oops : Ordinary Object Pointers </span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span> 
        <span class="token comment">//8B mark word 26 </span>
        <span class="token comment">// 4B Klass Pointer 如果关闭压缩‐XX:‐UseCompressedClassPointers或‐XX:‐UseCompressedOops，则占用8B </span>
        <span class="token keyword">int</span> id<span class="token punctuation">;</span> <span class="token comment">//4B </span>
        <span class="token class-name">String</span> name<span class="token punctuation">;</span> <span class="token comment">//4B 如果关闭压缩‐XX:‐UseCompressedOops，则占用8B </span>
        <span class="token keyword">byte</span> b<span class="token punctuation">;</span> <span class="token comment">//1B </span>
        <span class="token class-name">Object</span> o<span class="token punctuation">;</span> <span class="token comment">//4B 如果关闭压缩‐XX:‐UseCompressedOops，则占用8B </span>
    <span class="token punctuation">}</span> 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>什么是java对象的<strong>指针压缩</strong>？</p><ol><li>jdk1.6 update14开始，在64bit操作系统中，JVM支持指针压缩</li><li>jvm配置参数:UseCompressedOops，compressed­­压缩、oop(ordinary object pointer)­­对象指针</li><li>启用指针压缩:­XX:+UseCompressedOops(默认开启)，禁止指针压缩:­XX:­UseCompressedOops</li></ol><p>为什么要进行指针压缩？</p><ol><li>在64位平台的HotSpot中使用32位指针，内存使用会多出1.5倍左右，使用较大指针在主内存和缓存之间移动数据， 占用较大宽带，同时GC也会承受较大压力</li><li>为了减少64位平台下内存的消耗，启用指针压缩功能</li><li>在jvm中，32位地址最大支持4G内存(2的32次方)，可以通过对对象指针的压缩编码、解码方式进行优化，使得jvm只用32位地址就可以支持更大的内存配置(小于等于32G)</li><li>堆内存小于4G时，不需要启用指针压缩，jvm会直接去除高32位地址，即使用低虚拟地址空间</li><li>堆内存大于32G时，压缩指针会失效，会强制使用64位(即8字节)来对java对象寻址，这就会出现1的问题，所以堆内存不要大于32G为好</li></ol><h3 id="对象栈上分配" tabindex="-1"><a class="header-anchor" href="#对象栈上分配" aria-hidden="true">#</a> 对象栈上分配</h3><p><img src="https://xqhuang.oss-cn-beijing.aliyuncs.com/study/对象内存分配.png?versionId=CAEQERiBgMC4huCu1BciIDJhMDg5OTM2YjAxNDRlNjI4Y2QzODExNzhjMGE2YjRh" alt="对象内存分配"></p><blockquote><p>我们通过JVM内存分配可以知道JAVA中的对象都是在堆上进行分配，当对象没有被引用的时候，需要依靠GC进行回收内存，如果对象数量较多的时候，会给GC带来较大压力，也间接影响了应用的性能。为了减少临时对象在堆内分配的数量，JVM通过逃逸分析确定该对象不会被外部访问。如果不会逃逸可以将该对象在栈上分配内存，这样该对象所占用的 内存空间就可以随栈帧出栈而销毁，就减轻了垃圾回收的压力。 对象逃逸分析：就是分析对象动态作用域，当一个对象在方法中被定义后，它可能被外部方法所引用，例如作为调用参 数传递到其他地方中。</p></blockquote><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>public User test() {
    User user = new User();
    user.setId(1);
    user.setName(&quot;zhuge&quot;);
    // TODO 保存到数据库 
    return user;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​ 很显然test1方法中的user对象被返回了，这个对象的作用域范围不确定，test2方法中的user对象我们可以确定当方法结 束这个对象就可以认为是无效对象了，对于这样的对象我们其实可以将其分配在栈内存里，让其在方法结束时跟随栈内 存一起被回收掉。 JVM对于这种情况可以通过开启逃逸分析参数(-XX:+DoEscapeAnalysis)来优化对象内存分配位置，使其通过标量替换优先分配在栈上(栈上分配)，JDK7之后默认开启逃逸分析，如果要关闭使用参数(-XX:-DoEscapeAnalysis)</p><p><strong>标量替换</strong>：通过逃逸分析确定该对象不会被外部访问，并且对象可以被进一步分解时，JVM不会创建该对象，而是将该对象成员变量分解若干个被这个方法使用的成员变量所代替，这些代替的成员变量在栈帧或寄存器上分配空间，这样就不会因为没有一大块连续空间导致对象内存不够分配。开启标量替换参数(-XX:+EliminateAllocations)，JDK7之后默认开启。</p><p><strong>标量与聚合量</strong>：标量即不可被进一步分解的量，而JAVA的基本数据类型就是标量（如：int，long等基本数据类型以及reference类型等），标量的对立就是可以被进一步分解的量，而这种量称之为聚合量。而在JAVA中对象就是可以被进一 步分解的聚合量。</p><p><strong><em>栈上分配依赖于逃逸分析和标量替换</em></strong></p><h3 id="对象在eden区分配" tabindex="-1"><a class="header-anchor" href="#对象在eden区分配" aria-hidden="true">#</a> 对象在Eden区分配</h3><p>大多数情况下，对象在新生代中Eden区分配。当Eden区没有足够空间进行分配时，虚拟机将发起一次Minor GC。</p><ul><li><p><strong>Minor GC/Young GC</strong>：指发生新生代的的垃圾收集动作，Minor GC非常频繁，回收速度一般也比较快。</p></li><li><p><strong>Major GC/Full GC</strong>：一般会回收老年代 ，年轻代，方法区的垃圾，Major GC的速度一般会比Minor GC的慢 10倍以上。</p></li></ul><p><strong>Eden与Survivor区默认8:1:1</strong></p><p>​ 大量的对象被分配在eden区，eden区满了后会触发minor gc，可能会有99%以上的对象成为垃圾被回收掉，剩余存活 的对象会被挪到为空的那块survivor区，下一次eden区满了后又会触发minor gc，把eden区和survivor区垃圾对象回 收，把剩余存活的对象一次性挪动到另外一块为空的survivor区，因为新生代的对象都是朝生夕死的，存活时间很短，所 以JVM默认的8:1:1的比例是很合适的，让eden区尽量的大，survivor区够用即可， JVM默认有这个参数-XX:+UseAdaptiveSizePolicy(默认开启)，会导致这个8:1:1比例自动变化，如果不想这个比例有变 化可以设置参数-XX:-UseAdaptiveSizePolicy</p><h3 id="大对象直接进入老年代" tabindex="-1"><a class="header-anchor" href="#大对象直接进入老年代" aria-hidden="true">#</a> 大对象直接进入老年代</h3><p>​ 大对象就是需要大量连续内存空间的对象（比如：字符串、数组）。JVM参数 -XX:PretenureSizeThreshold 可以设置大 对象的大小，如果对象超过设置大小会直接进入老年代，不会进入年轻代，这个参数只在 Serial 和ParNew两个收集器下 有效。</p><blockquote><p>为了避免为大对象分配内存时的复制操作而降低效率。</p></blockquote><h3 id="长期存活的对象将进入老年代" tabindex="-1"><a class="header-anchor" href="#长期存活的对象将进入老年代" aria-hidden="true">#</a> 长期存活的对象将进入老年代</h3><p>​ 既然虚拟机采用了分代收集的思想来管理内存，那么内存回收时就必须能识别哪些对象应放在新生代，哪些对象应放在老年代中。为了做到这一点，虚拟机给每个对象一个对象年龄（Age）计数器。 如果对象在 Eden 出生并经过第一次 Minor GC 后仍然能够存活，并且能被 Survivor 容纳的话，将被移动到Survivor 空间中，并将对象年龄设为1。对象在 Survivor 中每熬过一次MinorGC，年龄就增加1岁，当它的年龄增加到一定程度（默认为15岁，CMS收集器默认6岁，不同的垃圾收集器会略微有点不同），就会被晋升到老年代中。对象晋升到老年代 的年龄阈值，可以通过参数 -XX:MaxTenuringThreshold 来设置。</p><h3 id="对象动态年龄判断" tabindex="-1"><a class="header-anchor" href="#对象动态年龄判断" aria-hidden="true">#</a> 对象动态年龄判断</h3><p>​ 当前放对象的Survivor区域里(其中一块区域，放对象的那块s区)，一批对象的总大小大于这块Survivor区域内存大小的50%(-XX:TargetSurvivorRatio可以指定)，那么此时大于等于这批对象年龄最大值的对象，就可以直接进入老年代了， 例如Survivor区域里现在有一批对象，年龄1+年龄2+年龄n的多个年龄对象总和超过了Survivor区域的50%，此时就会 把年龄n(含)以上的对象都放入老年代。这个规则其实是希望那些可能是长期存活的对象，尽早进入老年代。对象动态年 龄判断机制一般是在minor gc之后触发的。</p><h3 id="老年代空间分配担保机制" tabindex="-1"><a class="header-anchor" href="#老年代空间分配担保机制" aria-hidden="true">#</a> 老年代空间分配担保机制</h3><p>​ 年轻代每次minor gc之前JVM都会计算下老年代剩余可用空间 如果这个可用空间小于年轻代里现有的所有对象大小之和(包括垃圾对象) 就会看一个“-XX:-HandlePromotionFailure”(jdk1.8默认就设置了)的参数是否设置了 如果有这个参数，就会看看老年代的可用内存大小，是否大于之前每一次minor gc后进入老年代的对象的平均大小。 如果上一步结果是小于或者之前说的参数没有设置，那么就会触发一次Full gc，对老年代和年轻代一起回收一次垃圾， 如果回收完还是没有足够空间存放新的对象就会发生&quot;OOM&quot; 当然，如果minor gc之后剩余存活的需要挪动到老年代的对象大小还是大于老年代可用空间，那么也会触发full gc，full gc完之后如果还是没有空间放minor gc之后的存活对象，则也会发生“OOM”</p><p><img src="https://xqhuang.oss-cn-beijing.aliyuncs.com/study/老年代空间担保机制.png?versionId=CAEQERiBgMDQhuCu1BciIDJkZTEzZjNiN2M1MDRlZjc5M2NhMjU1MGQwMGU2MjA2" alt="老年代空间分配担保机制"></p><h1 id="对象内存回收" tabindex="-1"><a class="header-anchor" href="#对象内存回收" aria-hidden="true">#</a> 对象内存回收</h1><p>​ 堆中几乎放着所有的对象实例，对堆垃圾回收前的第一步就是要判断哪些对象已经死亡（即不能再被任何途径使用的对 象）。</p><h3 id="引用计数法" tabindex="-1"><a class="header-anchor" href="#引用计数法" aria-hidden="true">#</a> 引用计数法</h3><p>​ 给对象中添加一个引用计数器，每当有一个地方引用它，计数器就加1；当引用失效，计数器就减1；任何时候计数器为0的对象就是不可能再被使用的。 这个方法实现简单，效率高，但是目前主流的虚拟机中并没有选择这个算法来管理内存，其最主要的原因是它很难解决 对象之间相互循环引用的问题。 所谓对象之间的相互引用问题，如下面代码所示：除了对象objA 和 objB 相互引用着对 方之外，这两个对象之间再无任何引用。但是他们因为互相引用对方，导致它们的引用计数器都不为0，于是引用计数算 法无法通知 GC 回收器回收他们。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReferenceCountingGc</span> <span class="token punctuation">{</span> 
     <span class="token class-name">Object</span> instance <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> 

     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span> 
         <span class="token class-name">ReferenceCountingGc</span> objA <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReferenceCountingGc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
         <span class="token class-name">ReferenceCountingGc</span> objB <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReferenceCountingGc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
         objA<span class="token punctuation">.</span>instance <span class="token operator">=</span> objB<span class="token punctuation">;</span> 
         objB<span class="token punctuation">.</span>instance <span class="token operator">=</span> objA<span class="token punctuation">;</span> 
         objA <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> 
         objB <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> 
     <span class="token punctuation">}</span> 
 <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="可达性分析算法" tabindex="-1"><a class="header-anchor" href="#可达性分析算法" aria-hidden="true">#</a> 可达性分析算法</h3><p>将“GC Roots”对象作为起点，从这些节点开始向下搜索引用的对象，找到的对象都标记为非垃圾对象，其余未标记的 对象都是垃圾对象</p><p><strong>GC Roots</strong>根节点：线程栈的本地变量、静态变量、本地方法栈的变量等等。</p><p><img src="https://xqhuang.oss-cn-beijing.aliyuncs.com/study/GC-ROOT.png?versionId=CAEQERiBgIDYhuCu1BciIGZkZTIxMzI3ZWE4NjQ4NGJhNjFiMDg5MTZlOGYyY2Qx" alt="GC-ROOT"></p><h3 id="常见引用类型" tabindex="-1"><a class="header-anchor" href="#常见引用类型" aria-hidden="true">#</a> 常见引用类型</h3><p>java的引用类型一般分为四种：<strong>强引用</strong>、<strong>软引用</strong>、<strong>弱引用</strong>、<strong>虚引用</strong></p><p><strong>强引用</strong>：普通的变量引用</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>public static User user = new User();
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>软引用</strong>：将对象用SoftReference软引用类型的对象包裹，正常情况不会被回收，但是GC做完后发现释放不出空间存放新的对象，则会把这些软引用的对象回收掉。<strong>软引用可用来实现内存敏感的高速缓存</strong>。</p><p>软引用在实际中有重要的应用，例如浏览器的后退按钮。按后退时，这个后退时显示的网页内容是重新进行请求还是从缓存中取出呢？这就要看具体的实现策略了。</p><ul><li>如果一个网页在浏览结束时就进行内容的回收，则按后退查看前面浏览过的页面时，需要重新构建</li><li>如果将浏览过的网页存储到内存中会造成内存的大量浪费，甚至会造成内存溢出</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>public static SoftReference&lt;User&gt; user = new SoftReference&lt;User&gt;(new User());
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>弱引用</strong>：将对象用WeakReference软引用类型的对象包裹，弱引用跟没引用差不多，GC会直接回收掉，很少用</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code> public static WeakReference&lt;User&gt; user = new WeakReference&lt;User&gt;(new User());
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>虚引用</strong>：虚引用也称为幽灵引用或者幻影引用，它是最弱的一种引用关系，几乎不用</p><h3 id="finalize-方法最终判定对象是否存活" tabindex="-1"><a class="header-anchor" href="#finalize-方法最终判定对象是否存活" aria-hidden="true">#</a> finalize()方法最终判定对象是否存活</h3><p>即使在可达性分析算法中不可达的对象，也并非是“非死不可”的，这时候它们暂时处于“缓刑”阶段，要真正宣告一个对象死亡，至少要经历再次标记过程。 <strong>标记的前提是对象在进行可达性分析后发现没有与GC Roots相连接的引用链</strong>。</p><ol><li>第一次标记并进行一次筛选。</li></ol><p>筛选的条件是此对象是否有必要执行finalize()方法。</p><p>当对象没有覆盖finalize方法，对象将直接被回收。</p><ol start="2"><li>第二次标记</li></ol><p>如果这个对象覆盖了finalize方法，finalize方法是对象脱逃死亡命运的最后一次机会，如果对象要在finalize()中成功拯救自己，只要重新与引用链上的任何的一个对象建立关联即可，譬如把自己赋值给某个类变量或对象的成员变量，那在第 二次标记时它将移除出“即将回收”的集合。如果对象这时候还没逃脱，那基本上它就真的被回收了。 注意：一个对象的finalize()方法只会被执行一次，也就是说通过调用finalize方法自我救命的机会就一次。</p><h3 id="如何判断一个类是无用的类" tabindex="-1"><a class="header-anchor" href="#如何判断一个类是无用的类" aria-hidden="true">#</a> 如何判断一个类是无用的类</h3><p>类需要同时满足下面3个条件才能算是 “无用的类” ：</p><ul><li>该类所有的实例都已经被回收，也就是Java堆中不存在该类的任何实例。</li><li>加载该类的 ClassLoader 已经被回收。</li><li>该类对应的 java.lang.Class 对象没有在任何地方被引用，无法在任何地方通过反射访问该类的方法。</li></ul>`,83),o=[i];function p(l,c){return s(),a("div",null,o)}const u=n(t,[["render",p],["__file","JVM对象创建和内存分配.html.vue"]]);export{u as default};
