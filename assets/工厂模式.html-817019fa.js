import{_ as n,o as s,c as a,a as t}from"./app-999de8cb.js";const e={},p=t(`<h1 id="工厂模式" tabindex="-1"><a class="header-anchor" href="#工厂模式" aria-hidden="true">#</a> 工厂模式</h1><h2 id="一、基本介绍" tabindex="-1"><a class="header-anchor" href="#一、基本介绍" aria-hidden="true">#</a> 一、基本介绍</h2><p>工厂二字想必大家都不陌生，工厂就是用来建造东西的，我们市面上买的东西比如水杯、玩具、汽车等等都是从工厂生产的，那我们需不需要知道它们是如何生产出来的呢？当然不需要，商家从工厂中直接提货，我们就可以购买了，完全不知道它是如何生产的，这就是工厂方法模式。</p><p>工厂方法模式（Factory Method），定义一个用于创建对象的接口，让子类决定实例化哪一个类。工厂方法模式使一个类的实例化延迟到其子类。</p><div class="language-mermaid line-numbers-mode" data-ext="mermaid"><pre class="language-mermaid"><code><span class="token keyword">classDiagram</span>
    <span class="token keyword">class</span> Pizza
    Pizza<span class="token operator">:</span>  perpare<span class="token punctuation">(</span><span class="token punctuation">)</span> void
    Pizza<span class="token operator">:</span>  bake<span class="token punctuation">(</span><span class="token punctuation">)</span> void
    Pizza<span class="token operator">:</span>  cut<span class="token punctuation">(</span><span class="token punctuation">)</span> void 
    Pizza<span class="token operator">:</span>  box<span class="token punctuation">(</span><span class="token punctuation">)</span> void
    Pizza <span class="token arrow operator">&lt;--</span> BJCheesePizza
    Pizza <span class="token arrow operator">&lt;--</span> BJPepperPizza
    BJCheesePizza <span class="token arrow operator">&lt;--</span> BJOrderPizza
    BJPepperPizza <span class="token arrow operator">&lt;--</span> BJOrderPizza
    Pizza <span class="token arrow operator">&lt;--</span> LDCheesePizza
    Pizza <span class="token arrow operator">&lt;--</span> LDPepperPizza
    LDCheesePizza <span class="token arrow operator">&lt;--</span> LDOrderPizza
    LDPepperPizza <span class="token arrow operator">&lt;--</span> LDOrderPizza
    BJOrderPizza <span class="token arrow operator">&lt;--</span> OrderPizza
    LDOrderPizza <span class="token arrow operator">&lt;--</span> OrderPizza
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="二、工厂方法模式的优缺点" tabindex="-1"><a class="header-anchor" href="#二、工厂方法模式的优缺点" aria-hidden="true">#</a> 二、工厂方法模式的优缺点</h2><h3 id="_1、优点" tabindex="-1"><a class="header-anchor" href="#_1、优点" aria-hidden="true">#</a> 1、优点</h3><ol><li>良好的封装性、代码结构清晰。 如一个调用者想创建一个对象，只需要知道其名称即可，降低了模板间的耦合。</li><li>扩展性好。如果想增加一个产品，只需扩展一个工厂类即可。</li><li>屏蔽产品类,调用者只关心产品的接口。</li><li>典型的解耦框架</li></ol><h3 id="_2、缺点" tabindex="-1"><a class="header-anchor" href="#_2、缺点" aria-hidden="true">#</a> 2、缺点</h3><p>每增加一个产品，就需要增加一个产品工厂的类，增加了系统的复杂度。</p><h2 id="三、工厂方法模式的应用" tabindex="-1"><a class="header-anchor" href="#三、工厂方法模式的应用" aria-hidden="true">#</a> 三、工厂方法模式的应用</h2><h3 id="_1、何时使用" tabindex="-1"><a class="header-anchor" href="#_1、何时使用" aria-hidden="true">#</a> 1、何时使用</h3><p>不同条件下创建不用实例时。方法是让子类实现工厂接口。</p><h3 id="_2、使用场景" tabindex="-1"><a class="header-anchor" href="#_2、使用场景" aria-hidden="true">#</a> 2、使用场景</h3><ol><li>要生成对象的地方。</li><li>需要灵活的、可扩展的框架。</li><li>数据库访问、数据库可能变化时。</li></ol><h3 id="_3、应用实例" tabindex="-1"><a class="header-anchor" href="#_3、应用实例" aria-hidden="true">#</a> 3、应用实例</h3><ol><li><p>需要一辆汽车，直接从工厂里面提货，不用去管这辆车是怎么做出来的。</p></li><li><p>hibernate换数据库只需换方言和驱动即可。</p></li><li><p>简单计算器的实现。</p></li></ol><h2 id="四、《head-first-设计模式》读后感" tabindex="-1"><a class="header-anchor" href="#四、《head-first-设计模式》读后感" aria-hidden="true">#</a> 四、《Head First 设计模式》读后感</h2><p>1、定义了一个创建对象的接口，但由子类决定实例化的类是哪一个，工厂方法将类的实例化推迟到子类。</p><p>2、利用工厂方法创建对象，需要扩展一个类，并覆盖它的工厂方法。整个工厂方法模式就是通过子类来创建对象，只负责将客户从具体类型中解耦。</p><h2 id="五、代码实例" tabindex="-1"><a class="header-anchor" href="#五、代码实例" aria-hidden="true">#</a> 五、代码实例</h2><h3 id="_1、factory类" tabindex="-1"><a class="header-anchor" href="#_1、factory类" aria-hidden="true">#</a> 1、Factory类</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Factory</span> <span class="token punctuation">{</span>
   <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token class-name">Product</span> <span class="token function">createProduct</span><span class="token punctuation">(</span><span class="token class-name">String</span> owner<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">registerProduct</span><span class="token punctuation">(</span><span class="token class-name">Product</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">getAllProductOwner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token keyword">public</span> <span class="token class-name">Product</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token class-name">String</span> owner<span class="token punctuation">)</span><span class="token punctuation">{</span>
       <span class="token class-name">Product</span> p <span class="token operator">=</span> <span class="token function">createProduct</span><span class="token punctuation">(</span>owner<span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token function">registerProduct</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token keyword">return</span> p<span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2、idcardfactory类" tabindex="-1"><a class="header-anchor" href="#_2、idcardfactory类" aria-hidden="true">#</a> 2、IDCardFactory类</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span>
 
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IDCardFactory</span> <span class="token keyword">extends</span> <span class="token class-name">Factory</span> <span class="token punctuation">{</span>
    <span class="token class-name">List</span> owners <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name">Product</span> <span class="token function">createProduct</span><span class="token punctuation">(</span><span class="token class-name">String</span> owner<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;为 &quot;</span><span class="token operator">+</span>owner<span class="token operator">+</span><span class="token string">&quot; 创造产品成功...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">IDCardProduct</span><span class="token punctuation">(</span>owner<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
 
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">registerProduct</span><span class="token punctuation">(</span><span class="token class-name">Product</span> p<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> owner<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">IDCardProduct</span><span class="token punctuation">)</span>p<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getOwner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        owners<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>owner<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;注册 &quot;</span><span class="token operator">+</span>owner<span class="token operator">+</span><span class="token string">&quot; 的产品成功...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
 
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getAllProductOwner</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>owners<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;产品用户：&quot;</span><span class="token operator">+</span>owners<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3、抽象类" tabindex="-1"><a class="header-anchor" href="#_3、抽象类" aria-hidden="true">#</a> 3、抽象类</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">designMode<span class="token punctuation">.</span>factory</span><span class="token punctuation">;</span>
 
<span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Product</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4、-具体实现类" tabindex="-1"><a class="header-anchor" href="#_4、-具体实现类" aria-hidden="true">#</a> 4、 具体实现类</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">designMode<span class="token punctuation">.</span>factory</span><span class="token punctuation">;</span>
 
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IDCardProduct</span> <span class="token keyword">extends</span> <span class="token class-name">Product</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> owner<span class="token punctuation">;</span>
 
    <span class="token keyword">public</span> <span class="token class-name">IDCardProduct</span><span class="token punctuation">(</span><span class="token class-name">String</span> owner<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>owner <span class="token operator">=</span> owner<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
 
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;用户 &quot;</span><span class="token operator">+</span>owner<span class="token operator">+</span><span class="token string">&quot; 正在使用产品...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
 
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getOwner</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> owner<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5、测试类" tabindex="-1"><a class="header-anchor" href="#_5、测试类" aria-hidden="true">#</a> 5、测试类</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">designMode<span class="token punctuation">.</span>factory</span><span class="token punctuation">;</span>
 
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FactoryMain</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Factory</span> f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IDCardFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Product</span> p<span class="token operator">=</span>f<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token string">&quot;江疏影&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        p<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;--------------------&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        p<span class="token operator">=</span>f<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token string">&quot;邱淑贞&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        p<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;--------------------&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        f<span class="token punctuation">.</span><span class="token function">getAllProductOwner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于抽象类，必须有构造函数，因为子类的初始化需要先调用抽象类的构造函数，然后是子类的构造函数；但是抽象类的构造函数不能定义成抽象的，因为如果这样的话，将不能被实现，因此没有抽象的构造函数。</p><h1 id="六、jdk中的工厂模式" tabindex="-1"><a class="header-anchor" href="#六、jdk中的工厂模式" aria-hidden="true">#</a> 六、JDK中的工厂模式</h1><h1 id="七、总结" tabindex="-1"><a class="header-anchor" href="#七、总结" aria-hidden="true">#</a> 七、总结</h1><p>工厂模式使用了继承、接口、抽象等机制，和之前写的迭代器模式、模板模式都是一样的，可以看出设计模式并不是独立的，而是相互之间有关系和区别的，在学习的时候我们要善于总结设计模式之间的共同之处和不同之处，活学活用，才能在以后的大型项目中选择正确的开发方式，事半功倍。</p>`,35),o=[p];function c(i,l){return s(),a("div",null,o)}const r=n(e,[["render",c],["__file","工厂模式.html.vue"]]);export{r as default};
